"use strict";(()=>{var a={};a.id=499,a.ids=[499],a.modules={261:a=>{a.exports=require("next/dist/shared/lib/router/utils/app-paths")},3295:a=>{a.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10005:(a,b,c)=>{c.r(b),c.d(b,{handler:()=>ay,patchFetch:()=>ax,routeModule:()=>at,serverHooks:()=>aw,workAsyncStorage:()=>au,workUnitAsyncStorage:()=>av});var d={};c.r(d),c.d(d,{GET:()=>ag,POST:()=>ah});var e=c(95736),f=c(9117),g=c(4044),h=c(39326),i=c(32324),j=c(261),k=c(54290),l=c(85328),m=c(38928),n=c(46595),o=c(3421),p=c(17679),q=c(41681),r=c(63446),s=c(86439),t=c(51356),u=c(1003),v=c(51606),w=c(10641);async function x(a){let b=a.headers.get("x-api-key"),c=a.headers.get("x-internal-token");return(a.headers.get("user-agent"),c===process.env.INTERNAL_SERVICE_TOKEN&&process.env.INTERNAL_SERVICE_TOKEN)?{authenticated:!0,user:{id:"system",role:"admin"}}:b&&(process.env.ADMIN_API_KEYS?.split(",")||[]).includes(b)?{authenticated:!0,user:{id:"api-user",role:"admin"}}:{authenticated:!1,error:"Authentication required"}}function y(a,b=401){return w.NextResponse.json({success:!1,error:{code:401===b?"UNAUTHORIZED":"FORBIDDEN",message:a},timestamp:new Date().toISOString()},{status:b})}var z=c(48689),A=c(85766),B=c(71559),C=c(69334),D=c(87280),E=c(71491),F=c(27628),G=c(26069);let H={cpu:{warning:70,critical:90},memory:{warning:80,critical:95},disk:{warning:85,critical:95},loadAverage:{warning:2,critical:4}},I={getLatestMetrics:E.db.select().from(F.systemMetrics).where((0,z.eq)(F.systemMetrics.nodeId,A.ll.placeholder("nodeId"))).orderBy((0,B.i)(F.systemMetrics.timestamp)).limit(1).prepare(),getMetricsByTimeRange:E.db.select().from(F.systemMetrics).where((0,z.Uo)((0,z.eq)(F.systemMetrics.nodeId,A.ll.placeholder("nodeId")),(0,z.RO)(F.systemMetrics.timestamp,A.ll.placeholder("startTime")),(0,z.wJ)(F.systemMetrics.timestamp,A.ll.placeholder("endTime")))).orderBy((0,B.i)(F.systemMetrics.timestamp)).prepare(),getHealthStats:E.db.select({avgCpu:(0,C.Zf)(F.systemMetrics.cpuUsagePercent),avgMemory:(0,C.Zf)(F.systemMetrics.memoryUsagePercent),avgDisk:(0,C.Zf)(F.systemMetrics.diskUsagePercent),maxCpu:(0,C.T9)(F.systemMetrics.cpuUsagePercent),maxMemory:(0,C.T9)(F.systemMetrics.memoryUsagePercent),maxDisk:(0,C.T9)(F.systemMetrics.diskUsagePercent),minCpu:(0,C.jk)(F.systemMetrics.cpuUsagePercent),minMemory:(0,C.jk)(F.systemMetrics.memoryUsagePercent),minDisk:(0,C.jk)(F.systemMetrics.diskUsagePercent),avgLoad1m:(0,C.Zf)(F.systemMetrics.loadAverage1m),avgLoad5m:(0,C.Zf)(F.systemMetrics.loadAverage5m),avgLoad15m:(0,C.Zf)(F.systemMetrics.loadAverage15m)}).from(F.systemMetrics).where((0,z.Uo)((0,z.eq)(F.systemMetrics.nodeId,A.ll.placeholder("nodeId")),(0,z.RO)(F.systemMetrics.timestamp,A.ll.placeholder("startTime")))).prepare()};class J{async recordSystemMetrics(a){try{this.validateMetricsData(a);let b=this.calculateOverallHealth(a),c={id:(0,D.sX)(),...a,overallHealth:b,timestamp:new Date().toISOString()},[d]=await E.db.insert(F.systemMetrics).values(c).returning();return{success:!0,data:d,affectedRows:1}}catch(a){return this.handleError("recordSystemMetrics",a)}}async getLatestSystemHealth(a="localhost"){try{let[b]=await I.getLatestMetrics.execute({nodeId:a});if(!b)return{success:!0,data:{status:"critical",cpuUsage:null,memoryUsage:null,diskUsage:null,loadAverage:null,uptime:null,internetConnected:null,claudeApiLatency:null,lastUpdated:null,alerts:[{type:"connectivity",level:"critical",message:"No system metrics available",value:0,threshold:0}]}};let c=this.generateHealthAlerts(b),d={status:b.overallHealth,cpuUsage:b.cpuUsagePercent,memoryUsage:b.memoryUsagePercent,diskUsage:b.diskUsagePercent,loadAverage:b.loadAverage1m,uptime:null,internetConnected:1===b.internetConnected,claudeApiLatency:b.claudeApiLatencyMs,lastUpdated:b.timestamp,alerts:c};return{success:!0,data:d}}catch(a){return this.handleError("getLatestSystemHealth",a)}}async getSystemMetrics(a={},b={}){try{let b=this.buildMetricsConditions(a),{limit:c=100,offset:d=0}=a,e=E.db.select().from(F.systemMetrics);b.length>0&&(e=e.where((0,z.Uo)(...b))),e=e.orderBy((0,B.i)(F.systemMetrics.timestamp));let f=E.db.select({count:(0,A.ll)`COUNT(*)`}).from(F.systemMetrics);b.length>0&&(f=f.where((0,z.Uo)(...b)));let[{count:g}]=await f,h=await e.limit(c).offset(d);return{success:!0,data:{data:h,total:g,page:Math.floor(d/c)+1,pageSize:c,hasMore:d+h.length<g}}}catch(a){return this.handleError("getSystemMetrics",a)}}async getMetricsTrends(a="localhost",b=24){try{let c=new Date,d=new Date;d.setHours(d.getHours()-b);let e=(await I.getMetricsByTimeRange.execute({nodeId:a,startTime:d.toISOString(),endTime:c.toISOString()})).map(a=>({timestamp:a.timestamp,cpuUsage:a.cpuUsagePercent,memoryUsage:a.memoryUsagePercent,diskUsage:a.diskUsagePercent,loadAverage1m:a.loadAverage1m,overallHealth:a.overallHealth}));return{success:!0,data:e}}catch(a){return this.handleError("getMetricsTrends",a)}}async getHealthStatistics(a="localhost",b=24){try{let c=new Date;c.setHours(c.getHours()-b);let[d]=await I.getHealthStats.execute({nodeId:a,startTime:c.toISOString()}),[e]=await E.db.select({healthy:(0,A.ll)`COUNT(CASE WHEN overall_health = 'healthy' THEN 1 END)`,warning:(0,A.ll)`COUNT(CASE WHEN overall_health = 'warning' THEN 1 END)`,critical:(0,A.ll)`COUNT(CASE WHEN overall_health = 'critical' THEN 1 END)`}).from(F.systemMetrics).where((0,z.Uo)((0,z.eq)(F.systemMetrics.nodeId,a),(0,z.RO)(F.systemMetrics.timestamp,c.toISOString()))),f={averages:{cpu:d.avgCpu,memory:d.avgMemory,disk:d.avgDisk,load1m:d.avgLoad1m,load5m:d.avgLoad5m,load15m:d.avgLoad15m},maximums:{cpu:d.maxCpu,memory:d.maxMemory,disk:d.maxDisk},minimums:{cpu:d.minCpu,memory:d.minMemory,disk:d.minDisk},healthDistribution:{healthy:e.healthy,warning:e.warning,critical:e.critical}};return{success:!0,data:f}}catch(a){return this.handleError("getHealthStatistics",a)}}async getSystemUptime(a="localhost"){try{let[b]=await E.db.select().from(F.systemMetrics).where((0,z.eq)(F.systemMetrics.nodeId,a)).orderBy((0,B.Y)(F.systemMetrics.timestamp)).limit(1),[c]=await E.db.select().from(F.systemMetrics).where((0,z.eq)(F.systemMetrics.nodeId,a)).orderBy((0,B.i)(F.systemMetrics.timestamp)).limit(1);if(!b||!c)return{success:!0,data:{totalUptimeHours:0,healthyUptimePercentage:0,lastRestartTime:null,continuousHealthyMinutes:0}};let d=new Date(c.timestamp).getTime()-new Date(b.timestamp).getTime(),[e]=await E.db.select({totalMetrics:(0,A.ll)`COUNT(*)`,healthyMetrics:(0,A.ll)`COUNT(CASE WHEN overall_health = 'healthy' THEN 1 END)`}).from(F.systemMetrics).where((0,z.eq)(F.systemMetrics.nodeId,a)),f=e.totalMetrics>0?e.healthyMetrics/e.totalMetrics*100:0,g=await E.db.select().from(F.systemMetrics).where((0,z.eq)(F.systemMetrics.nodeId,a)).orderBy((0,B.i)(F.systemMetrics.timestamp)).limit(1e3),h=0;for(let a of g)if("healthy"===a.overallHealth)h+=1;else break;return{success:!0,data:{totalUptimeHours:d/36e5,healthyUptimePercentage:f,lastRestartTime:b.timestamp,continuousHealthyMinutes:h}}}catch(a){return this.handleError("getSystemUptime",a)}}async cleanupOldMetrics(a=30){try{let b=new Date;b.setDate(b.getDate()-a);let c=await E.db.delete(F.systemMetrics).where((0,z.wJ)(F.systemMetrics.timestamp,b.toISOString()));return{success:!0,data:{deletedCount:c.changes},affectedRows:c.changes}}catch(a){return this.handleError("cleanupOldMetrics",a)}}calculateOverallHealth(a){let b=[];return(null!==a.cpuUsagePercent&&(a.cpuUsagePercent>=H.cpu.critical?b.push("critical"):a.cpuUsagePercent>=H.cpu.warning&&b.push("warning")),null!==a.memoryUsagePercent&&(a.memoryUsagePercent>=H.memory.critical?b.push("critical"):a.memoryUsagePercent>=H.memory.warning&&b.push("warning")),null!==a.diskUsagePercent&&(a.diskUsagePercent>=H.disk.critical?b.push("critical"):a.diskUsagePercent>=H.disk.warning&&b.push("warning")),null!==a.loadAverage1m&&void 0!==a.loadAverage1m&&(a.loadAverage1m>=H.loadAverage.critical?b.push("critical"):a.loadAverage1m>=H.loadAverage.warning&&b.push("warning")),!1===a.internetConnected&&b.push("critical"),b.includes("critical"))?"critical":b.includes("warning")?"warning":"healthy"}generateHealthAlerts(a){let b=[];return null!==a.cpuUsagePercent&&(a.cpuUsagePercent>=H.cpu.critical?b.push({type:"cpu",level:"critical",message:`CPU usage critical: ${a.cpuUsagePercent.toFixed(1)}%`,value:a.cpuUsagePercent,threshold:H.cpu.critical}):a.cpuUsagePercent>=H.cpu.warning&&b.push({type:"cpu",level:"warning",message:`CPU usage high: ${a.cpuUsagePercent.toFixed(1)}%`,value:a.cpuUsagePercent,threshold:H.cpu.warning})),null!==a.memoryUsagePercent&&(a.memoryUsagePercent>=H.memory.critical?b.push({type:"memory",level:"critical",message:`Memory usage critical: ${a.memoryUsagePercent.toFixed(1)}%`,value:a.memoryUsagePercent,threshold:H.memory.critical}):a.memoryUsagePercent>=H.memory.warning&&b.push({type:"memory",level:"warning",message:`Memory usage high: ${a.memoryUsagePercent.toFixed(1)}%`,value:a.memoryUsagePercent,threshold:H.memory.warning})),null!==a.diskUsagePercent&&(a.diskUsagePercent>=H.disk.critical?b.push({type:"disk",level:"critical",message:`Disk usage critical: ${a.diskUsagePercent.toFixed(1)}%`,value:a.diskUsagePercent,threshold:H.disk.critical}):a.diskUsagePercent>=H.disk.warning&&b.push({type:"disk",level:"warning",message:`Disk usage high: ${a.diskUsagePercent.toFixed(1)}%`,value:a.diskUsagePercent,threshold:H.disk.warning})),null!==a.loadAverage1m&&(a.loadAverage1m>=H.loadAverage.critical?b.push({type:"load",level:"critical",message:`System load critical: ${a.loadAverage1m.toFixed(2)}`,value:a.loadAverage1m,threshold:H.loadAverage.critical}):a.loadAverage1m>=H.loadAverage.warning&&b.push({type:"load",level:"warning",message:`System load high: ${a.loadAverage1m.toFixed(2)}`,value:a.loadAverage1m,threshold:H.loadAverage.warning})),!1===a.internetConnected&&b.push({type:"connectivity",level:"critical",message:"Internet connection unavailable",value:0,threshold:1}),b}buildMetricsConditions(a){let b=[];return a.nodeId&&b.push((0,z.eq)(F.systemMetrics.nodeId,a.nodeId)),a.dateFrom&&b.push((0,z.RO)(F.systemMetrics.timestamp,a.dateFrom.toISOString())),a.dateTo&&b.push((0,z.wJ)(F.systemMetrics.timestamp,a.dateTo.toISOString())),a.healthStatus&&b.push((0,z.eq)(F.systemMetrics.overallHealth,a.healthStatus)),b}validateMetricsData(a){if(null!==a.cpuUsagePercent&&void 0!==a.cpuUsagePercent&&(a.cpuUsagePercent<0||a.cpuUsagePercent>100))throw new G.yI("cpuUsagePercent must be between 0 and 100","cpuUsagePercent",a.cpuUsagePercent);if(null!==a.memoryUsagePercent&&void 0!==a.memoryUsagePercent&&(a.memoryUsagePercent<0||a.memoryUsagePercent>100))throw new G.yI("memoryUsagePercent must be between 0 and 100","memoryUsagePercent",a.memoryUsagePercent);if(null!==a.diskUsagePercent&&void 0!==a.diskUsagePercent&&(a.diskUsagePercent<0||a.diskUsagePercent>100))throw new G.yI("diskUsagePercent must be between 0 and 100","diskUsagePercent",a.diskUsagePercent);if(null!==a.loadAverage1m&&void 0!==a.loadAverage1m&&a.loadAverage1m<0)throw new G.yI("loadAverage1m cannot be negative","loadAverage1m",a.loadAverage1m);if(null!==a.claudeApiLatencyMs&&void 0!==a.claudeApiLatencyMs&&a.claudeApiLatencyMs<0)throw new G.yI("claudeApiLatencyMs cannot be negative","claudeApiLatencyMs",a.claudeApiLatencyMs);if(null!==a.diskFreeBytes&&void 0!==a.diskFreeBytes&&a.diskFreeBytes<0)throw new G.yI("diskFreeBytes cannot be negative","diskFreeBytes",a.diskFreeBytes);if(null!==a.diskTotalBytes&&void 0!==a.diskTotalBytes&&a.diskTotalBytes<=0)throw new G.yI("diskTotalBytes must be positive","diskTotalBytes",a.diskTotalBytes)}handleError(a,b){return(console.error(`MetricsService.${a} error:`,b),b instanceof G.yI||b instanceof G.m_)?{success:!1,error:b.message}:{success:!1,error:b instanceof Error?b.message:"Unknown database error"}}}let K=new J,L=require("events"),M=require("os"),N=require("child_process");var O=c(28354);require("ws");let P=(0,O.promisify)(N.exec);class Q extends L.EventEmitter{constructor(a={}){super(),this.intervalId=null,this.isRunning=!1,this.lastStats=null,this.previousCpuInfo=null,this.config={nodeId:"localhost",collectionInterval:3e4,thresholds:{cpu:{warning:70,critical:90},memory:{warning:80,critical:95},disk:{warning:85,critical:95},load:{warning:2,critical:4}},enabledMetrics:{cpu:!0,memory:!0,disk:!0,network:!0},...a},this.handleThresholdBreach=this.handleThresholdBreach.bind(this),this.handleHealthStatusChange=this.handleHealthStatusChange.bind(this)}async start(){if(this.isRunning)throw Error("System monitor is already running");this.isRunning=!0,this.emit("started",{nodeId:this.config.nodeId}),await this.collectMetrics(),this.intervalId=setInterval(async()=>{try{await this.collectMetrics()}catch(a){this.emit("error",a)}},this.config.collectionInterval),console.log(`System monitor started for node ${this.config.nodeId}, collecting every ${this.config.collectionInterval}ms`)}async stop(){this.isRunning&&(this.isRunning=!1,this.intervalId&&(clearInterval(this.intervalId),this.intervalId=null),this.emit("stopped",{nodeId:this.config.nodeId}),console.log(`System monitor stopped for node ${this.config.nodeId}`))}getConfig(){return{...this.config}}updateConfig(a){let b={...this.config};this.config={...this.config,...a},this.isRunning&&b.collectionInterval!==this.config.collectionInterval&&this.restart(),this.emit("configUpdated",{oldConfig:b,newConfig:this.config})}getLastStats(){return this.lastStats?{...this.lastStats}:null}async collectNow(){return await this.collectMetrics()}isMonitoring(){return this.isRunning}async restart(){await this.stop(),await this.start()}async collectMetrics(){let a={cpuUsage:0,memoryUsage:0,diskUsage:0,loadAverage:[0,0,0],uptime:0,diskSpace:{free:0,total:0},networkConnectivity:{internet:!1}};try{let b=[];return this.config.enabledMetrics.cpu&&b.push(this.collectCpuStats(a)),this.config.enabledMetrics.memory&&b.push(this.collectMemoryStats(a)),this.config.enabledMetrics.disk&&b.push(this.collectDiskStats(a)),this.config.enabledMetrics.network&&b.push(this.collectNetworkStats(a)),await Promise.allSettled(b),a.loadAverage=M.loadavg(),a.uptime=M.uptime(),this.lastStats=a,await this.storeMetrics(a),this.checkThresholds(a),this.broadcastStats(a),this.emit("metricsCollected",a),a}catch(a){throw this.emit("error",a),a}}async collectCpuStats(a){try{let b=M.cpus();if(this.previousCpuInfo){let c=0,d=0;for(let a=0;a<b.length;a++){let e=b[a],f=this.previousCpuInfo[a],g=Object.values(e.times).reduce((a,b)=>a+b,0),h=Object.values(f.times).reduce((a,b)=>a+b,0),i=g-h,j=e.times.idle-f.times.idle;d+=i,c+=j}let e=d>0?(d-c)/d*100:0;a.cpuUsage=Math.max(0,Math.min(100,e))}else a.cpuUsage=0;this.previousCpuInfo=b}catch(b){console.error("Error collecting CPU stats:",b),a.cpuUsage=0}}async collectMemoryStats(a){try{let b=M.totalmem(),c=M.freemem();a.memoryUsage=(b-c)/b*100}catch(b){console.error("Error collecting memory stats:",b),a.memoryUsage=0}}async collectDiskStats(a){try{let{stdout:b}=await P("df / | tail -1"),c=b.trim().split(/\s+/);if(c.length>=5){let b=1024*parseInt(c[1]),d=1024*parseInt(c[2]),e=1024*parseInt(c[3]);a.diskSpace.total=b,a.diskSpace.free=e,a.diskUsage=d/b*100}}catch(b){console.error("Error collecting disk stats:",b),a.diskUsage=0,a.diskSpace={free:0,total:0}}}async collectNetworkStats(a){try{let b=Date.now();try{await P("ping -c 1 -W 5000 8.8.8.8",{timeout:1e4}),a.networkConnectivity.internet=!0,a.networkConnectivity.latency=Date.now()-b}catch(b){a.networkConnectivity.internet=!1}}catch(b){console.error("Error collecting network stats:",b),a.networkConnectivity.internet=!1}}async storeMetrics(a){try{let b={nodeId:this.config.nodeId,cpuUsagePercent:a.cpuUsage,memoryUsagePercent:a.memoryUsage,diskUsagePercent:a.diskUsage,loadAverage1m:a.loadAverage[0],loadAverage5m:a.loadAverage[1],loadAverage15m:a.loadAverage[2],diskFreeBytes:a.diskSpace.free,diskTotalBytes:a.diskSpace.total,internetConnected:+!!a.networkConnectivity.internet,claudeApiLatencyMs:a.networkConnectivity.latency||null};await K.recordSystemMetrics(b)}catch(a){console.error("Error storing metrics:",a),this.emit("error",a)}}checkThresholds(a){let b=[];a.cpuUsage>=this.config.thresholds.cpu.critical?b.push({metric:"cpu",level:"critical",value:a.cpuUsage,threshold:this.config.thresholds.cpu.critical}):a.cpuUsage>=this.config.thresholds.cpu.warning&&b.push({metric:"cpu",level:"warning",value:a.cpuUsage,threshold:this.config.thresholds.cpu.warning}),a.memoryUsage>=this.config.thresholds.memory.critical?b.push({metric:"memory",level:"critical",value:a.memoryUsage,threshold:this.config.thresholds.memory.critical}):a.memoryUsage>=this.config.thresholds.memory.warning&&b.push({metric:"memory",level:"warning",value:a.memoryUsage,threshold:this.config.thresholds.memory.warning}),a.diskUsage>=this.config.thresholds.disk.critical?b.push({metric:"disk",level:"critical",value:a.diskUsage,threshold:this.config.thresholds.disk.critical}):a.diskUsage>=this.config.thresholds.disk.warning&&b.push({metric:"disk",level:"warning",value:a.diskUsage,threshold:this.config.thresholds.disk.warning}),a.loadAverage[0]>=this.config.thresholds.load.critical?b.push({metric:"load",level:"critical",value:a.loadAverage[0],threshold:this.config.thresholds.load.critical}):a.loadAverage[0]>=this.config.thresholds.load.warning&&b.push({metric:"load",level:"warning",value:a.loadAverage[0],threshold:this.config.thresholds.load.warning}),b.length>0&&this.emit("thresholdBreach",b)}handleThresholdBreach(a){for(let b of a)console.warn(`Threshold breach: ${b.metric} ${b.level} - ${b.value.toFixed(2)}% (threshold: ${b.threshold}%)`)}handleHealthStatusChange(a){console.log(`System health status changed to: ${a}`)}broadcastStats(a){}calculateHealthStatus(a){return a.cpuUsage>=this.config.thresholds.cpu.critical||a.memoryUsage>=this.config.thresholds.memory.critical||a.diskUsage>=this.config.thresholds.disk.critical||a.loadAverage[0]>=this.config.thresholds.load.critical||!a.networkConnectivity.internet?"critical":a.cpuUsage>=this.config.thresholds.cpu.warning||a.memoryUsage>=this.config.thresholds.memory.warning||a.diskUsage>=this.config.thresholds.disk.warning||a.loadAverage[0]>=this.config.thresholds.load.warning?"warning":"healthy"}}let R=new Q;class S extends L.EventEmitter{constructor(a={}){super(),this.collectionHistory=new Map,this.aggregationTimers=new Map,this.isCollecting=!1,this.config={enableRealTimeCollection:!0,historicalRetentionDays:30,aggregationIntervals:{minute:!0,hour:!0,day:!0},customMetrics:{},...a},this.setupEventListeners()}async start(){if(this.isCollecting)throw Error("Metrics collection is already running");this.isCollecting=!0,R.isMonitoring()||await R.start(),this.setupAggregationTimers(),await this.initializeHistory(),this.emit("started"),console.log("Metrics collector started")}async stop(){if(this.isCollecting){for(let[a,b]of(this.isCollecting=!1,Array.from(this.aggregationTimers.entries())))clearInterval(b);this.aggregationTimers.clear(),this.emit("stopped"),console.log("Metrics collector stopped")}}async getMetricsSnapshot(){let a=R.getLastStats();if(!a)throw Error("No current system stats available");let b=await this.getHistoricalTrends(),c=await this.getAggregatedMetrics(),d=this.calculatePredictions();return{timestamp:new Date().toISOString(),current:a,trends:b,aggregated:c,predictions:d}}async getHistoricalTrends(a=["cpu","memory","disk"],b="day"){let c=[],d=this.getHoursForTimeframe(b);for(let b of a)try{let a=await this.calculateMetricTrend(b,d);c.push(a)}catch(a){console.error(`Error calculating trend for ${b}:`,a)}return c}async getAggregatedMetrics(){let[a,b,c]=await Promise.all([this.calculateAggregatedMetrics(24),this.calculateAggregatedMetrics(168),this.calculateAggregatedMetrics(720)]);return{last24Hours:a,last7Days:b,last30Days:c}}addCustomMetric(a,b){this.config.customMetrics[a]=b,this.emit("customMetricAdded",{name:a})}removeCustomMetric(a){delete this.config.customMetrics[a],this.emit("customMetricRemoved",{name:a})}async cleanupOldMetrics(){let a=await K.cleanupOldMetrics(this.config.historicalRetentionDays);if(a.success&&a.data)return a.data;throw Error(a.error||"Failed to cleanup old metrics")}getCollectionStats(){return{isCollecting:this.isCollecting,historySize:Array.from(this.collectionHistory.values()).reduce((a,b)=>a+b.length,0),customMetricsCount:Object.keys(this.config.customMetrics).length,aggregationTimersActive:this.aggregationTimers.size,config:{...this.config}}}setupEventListeners(){R.on("metricsCollected",a=>{this.isCollecting&&this.processMetrics(a)}),R.on("thresholdBreach",a=>{this.emit("thresholdBreach",a)}),R.on("error",a=>{this.emit("error",a)})}processMetrics(a){this.updateCollectionHistory(a),this.collectCustomMetrics(),this.emit("metricsProcessed",{stats:a,timestamp:new Date().toISOString()})}updateCollectionHistory(a){Date.now(),this.addToHistory("cpu",a.cpuUsage,1e3),this.addToHistory("memory",a.memoryUsage,1e3),this.addToHistory("disk",a.diskUsage,1e3),this.addToHistory("load",a.loadAverage[0],1e3)}addToHistory(a,b,c){this.collectionHistory.has(a)||this.collectionHistory.set(a,[]);let d=this.collectionHistory.get(a);d.push(b),d.length>c&&d.splice(0,d.length-c)}async collectCustomMetrics(){for(let[a,b]of Object.entries(this.config.customMetrics))try{let c=await b();this.addToHistory(`custom_${a}`,c,1e3),this.emit("customMetricCollected",{name:a,value:c})}catch(b){console.error(`Error collecting custom metric ${a}:`,b)}}setupAggregationTimers(){if(this.config.aggregationIntervals.minute){let a=setInterval(()=>{this.performAggregation("minute")},6e4);this.aggregationTimers.set("minute",a)}if(this.config.aggregationIntervals.hour){let a=setInterval(()=>{this.performAggregation("hour")},36e5);this.aggregationTimers.set("hour",a)}if(this.config.aggregationIntervals.day){let a=setInterval(()=>{this.performAggregation("day")},864e5);this.aggregationTimers.set("day",a)}}async performAggregation(a){try{let b=await this.calculateAggregatedMetrics("minute"===a?.017:"hour"===a?1:24);this.emit("aggregationCompleted",{period:a,aggregated:b,timestamp:new Date().toISOString()}),console.log(`Completed ${a} aggregation`)}catch(b){console.error(`Error performing ${a} aggregation:`,b),this.emit("aggregationError",{period:a,error:b})}}async calculateAggregatedMetrics(a){let b=new Date,c=new Date(b.getTime()-60*a*6e4),d=await K.getHealthStatistics("localhost",a);if(!d.success)throw Error(`Failed to get health statistics: ${d.error}`);let e=d.data;return{period:a<=1?"minute":a<=24?"hour":"day",startTime:c.toISOString(),endTime:b.toISOString(),metrics:{avgCpu:e.averages.cpu||0,maxCpu:e.maximums.cpu||0,minCpu:e.minimums.cpu||0,avgMemory:e.averages.memory||0,maxMemory:e.maximums.memory||0,minMemory:e.minimums.memory||0,avgDisk:e.averages.disk||0,maxDisk:e.maximums.disk||0,minDisk:e.minimums.disk||0,avgLoad:e.averages.load1m||0,maxLoad:e.averages.load1m||0,minLoad:e.averages.load1m||0,uptimePercentage:this.calculateUptimePercentage(e.healthDistribution),healthDistribution:e.healthDistribution,dataPoints:e.healthDistribution.healthy+e.healthDistribution.warning+e.healthDistribution.critical}}}calculateUptimePercentage(a){let b=a.healthy+a.warning+a.critical;return b>0?(a.healthy+a.warning)/b*100:0}async calculateMetricTrend(a,b){let c=await K.getMetricsTrends("localhost",b);if(!c.success)throw Error(`Failed to get trends for ${a}: ${c.error}`);let d=c.data,e=d.map(b=>{switch(a){case"cpu":return b.cpuUsage||0;case"memory":return b.memoryUsage||0;case"disk":return b.diskUsage||0;case"load":return b.loadAverage1m||0;default:return 0}}),f=this.calculateTrendDirection(e),g=this.calculateChangePercentage(e),h=this.calculateSignificance(g,e.length);return{metric:a,timeframe:`${b}h`,trend:f,changePercentage:g,significance:h,data:d.map((a,b)=>({timestamp:a.timestamp,value:e[b]}))}}calculateTrendDirection(a){if(a.length<2)return"stable";let b=a.slice(0,Math.floor(a.length/2)),c=a.slice(Math.floor(a.length/2)),d=b.reduce((a,b)=>a+b,0)/b.length,e=c.reduce((a,b)=>a+b,0)/c.length-d;return 5>Math.abs(e)?"stable":e>0?"increasing":"decreasing"}calculateChangePercentage(a){if(a.length<2)return 0;let b=a[0],c=a[a.length-1];return 0===b?100*(c>0):(c-b)/b*100}calculateSignificance(a,b){let c=Math.abs(a);return c>25&&b>10?"high":c>10&&b>5?"medium":"low"}calculatePredictions(){let a=this.collectionHistory.get("cpu")||[],b=this.collectionHistory.get("memory")||[],c=this.collectionHistory.get("disk")||[],d=this.linearPredict(a),e=this.linearPredict(b);return{nextHour:{cpu:Math.max(0,Math.min(100,d)),memory:Math.max(0,Math.min(100,e)),disk:Math.max(0,Math.min(100,this.linearPredict(c)))},confidence:Math.min(1,Math.min(a.length,b.length,c.length)/10/10)}}linearPredict(a){if(a.length<2)return a[0]||0;let b=a.slice(-10),c=b.length,d=0,e=0,f=0,g=0;for(let a=0;a<c;a++)d+=a,e+=b[a],f+=a*b[a],g+=a*a;let h=(c*f-d*e)/(c*g-d*d),i=(e-h*d)/c;return h*c+i}getHoursForTimeframe(a){switch(a){case"hour":return 1;case"day":default:return 24;case"week":return 168;case"month":return 720}}async initializeHistory(){try{let a=await K.getMetricsTrends("localhost",24);if(a.success&&a.data)for(let b of a.data)null!==b.cpuUsage&&this.addToHistory("cpu",b.cpuUsage,1e3),null!==b.memoryUsage&&this.addToHistory("memory",b.memoryUsage,1e3),null!==b.diskUsage&&this.addToHistory("disk",b.diskUsage,1e3),null!==b.loadAverage1m&&this.addToHistory("load",b.loadAverage1m,1e3);console.log("Metrics collection history initialized")}catch(a){console.error("Error initializing collection history:",a)}}}let T=new S;class U extends L.EventEmitter{constructor(a={}){super(),this.alerts=new Map,this.rules=new Map,this.channels=new Map,this.suppressions=new Map,this.breachCounts=new Map,this.resolutionTimer=null,this.config={maxActiveAlerts:1e3,alertRetentionHours:168,defaultSuppressionMinutes:5,enableAutoResolution:!0,resolutionCheckInterval:6e4,...a},this.setupDefaultChannels(),this.setupDefaultRules(),this.config.enableAutoResolution&&this.startResolutionTimer()}async createAlert(a){let b={id:this.generateAlertId(),timestamp:new Date().toISOString(),acknowledged:!1,resolved:!1,...a};return this.isAlertSuppressed(b)?console.debug(`Alert suppressed: ${b.title}`):(this.alerts.set(b.id,b),this.cleanupOldAlerts(),this.emit("alertCreated",b),await this.sendAlert(b),console.log(`Alert created: ${b.severity.toUpperCase()} - ${b.title}`)),b}async processThresholdBreach(a,b,c,d,e="system-monitor"){let f=`threshold_${a}`,g=this.rules.get(f);if(!g||!g.enabled)return null;let h=`${f}_${a}`,i=new Date;if(this.breachCounts.has(h)){let a=this.breachCounts.get(h);i.getTime()-a.firstBreach.getTime()>60*g.evaluationWindow*1e3?this.breachCounts.set(h,{count:1,firstBreach:i}):a.count++}else this.breachCounts.set(h,{count:1,firstBreach:i});let j=this.breachCounts.get(h);return j.count>=g.consecutiveBreaches?(this.breachCounts.delete(h),this.addSuppression(f,g.suppressionDuration),await this.createAlert({type:"threshold",severity:d,title:`${g.name} Threshold Exceeded`,message:`${a} is ${b.toFixed(2)}${a.includes("percentage")?"%":""}, exceeding threshold of ${c}${a.includes("percentage")?"%":""}`,source:e,metric:a,value:b,threshold:c,metadata:{ruleId:g.id,ruleName:g.name,consecutiveBreaches:j.count,evaluationWindow:g.evaluationWindow}})):null}async acknowledgeAlert(a,b){let c=this.alerts.get(a);return!!c&&(c.acknowledged=!0,c.acknowledgedAt=new Date().toISOString(),b&&(c.metadata={...c.metadata,acknowledgedBy:b}),this.emit("alertAcknowledged",c),console.log(`Alert acknowledged: ${c.title}`),!0)}async resolveAlert(a,b){let c=this.alerts.get(a);return!!c&&(c.resolved=!0,c.resolvedAt=new Date().toISOString(),b&&(c.metadata={...c.metadata,resolvedBy:b}),this.emit("alertResolved",c),console.log(`Alert resolved: ${c.title}`),!0)}getAlerts(a){let b=Array.from(this.alerts.values());return a&&(a.severity&&(b=b.filter(b=>b.severity===a.severity)),a.type&&(b=b.filter(b=>b.type===a.type)),a.source&&(b=b.filter(b=>b.source===a.source)),void 0!==a.resolved&&(b=b.filter(b=>b.resolved===a.resolved)),void 0!==a.acknowledged&&(b=b.filter(b=>b.acknowledged===a.acknowledged))),b.sort((a,b)=>new Date(b.timestamp).getTime()-new Date(a.timestamp).getTime()),a?.limit&&(b=b.slice(0,a.limit)),b}getAlertStats(){let a=Array.from(this.alerts.values()),b=new Date(new Date().getTime()-864e5),c=a.filter(a=>new Date(a.timestamp)>b).length,d=a.filter(a=>a.resolved),e=d.reduce((a,b)=>b.resolvedAt?a+(new Date(b.resolvedAt).getTime()-new Date(b.timestamp).getTime()):a,0),f=d.length>0?e/d.length/6e4:0,g={},h={};for(let b of a)g[b.type]=(g[b.type]||0)+1,h[b.severity]=(h[b.severity]||0)+1;return{totalAlerts:a.length,activeAlerts:a.filter(a=>!a.resolved).length,resolvedAlerts:d.length,acknowledgedAlerts:a.filter(a=>a.acknowledged).length,alertsByType:g,alertsBySeverity:h,alertsLast24Hours:c,averageResolutionTime:f}}addRule(a){let b={id:this.generateRuleId(a.name),...a};return this.rules.set(b.id,b),this.emit("ruleAdded",b),console.log(`Alert rule added: ${b.name}`),b}removeRule(a){let b=this.rules.get(a);return!!b&&(this.rules.delete(a),this.emit("ruleRemoved",b),console.log(`Alert rule removed: ${b.name}`),!0)}getRules(){return Array.from(this.rules.values())}addChannel(a){this.channels.set(a.id,a),this.emit("channelAdded",a),console.log(`Alert channel added: ${a.name}`)}removeChannel(a){let b=this.channels.get(a);return!!b&&(this.channels.delete(a),this.emit("channelRemoved",b),console.log(`Alert channel removed: ${b.name}`),!0)}getChannels(){return Array.from(this.channels.values())}async shutdown(){for(let a of(this.resolutionTimer&&(clearInterval(this.resolutionTimer),this.resolutionTimer=null),this.getAlerts({resolved:!1})))await this.resolveAlert(a.id,"system-shutdown");this.emit("shutdown"),console.log("Alert manager shutdown")}setupDefaultChannels(){this.addChannel({id:"websocket",type:"websocket",name:"WebSocket Broadcast",enabled:!0,config:{},handler:async a=>{}}),this.addChannel({id:"console",type:"console",name:"Console Log",enabled:!0,config:{},handler:async a=>{let b=new Date(a.timestamp).toLocaleString(),c="critical"===a.severity?"\uD83D\uDEA8":"error"===a.severity?"❌":"warning"===a.severity?"⚠️":"ℹ️";console.log(`${c} [${b}] ${a.severity.toUpperCase()} - ${a.title}: ${a.message}`)}})}setupDefaultRules(){this.addRule({name:"CPU High Usage Warning",description:"CPU usage exceeds warning threshold",enabled:!0,metric:"cpu",condition:"greater_than",threshold:70,severity:"warning",suppressionDuration:5,evaluationWindow:5,consecutiveBreaches:2}),this.addRule({name:"CPU Critical Usage",description:"CPU usage exceeds critical threshold",enabled:!0,metric:"cpu",condition:"greater_than",threshold:90,severity:"critical",suppressionDuration:2,evaluationWindow:3,consecutiveBreaches:1}),this.addRule({name:"Memory High Usage Warning",description:"Memory usage exceeds warning threshold",enabled:!0,metric:"memory",condition:"greater_than",threshold:80,severity:"warning",suppressionDuration:5,evaluationWindow:5,consecutiveBreaches:2}),this.addRule({name:"Memory Critical Usage",description:"Memory usage exceeds critical threshold",enabled:!0,metric:"memory",condition:"greater_than",threshold:95,severity:"critical",suppressionDuration:2,evaluationWindow:3,consecutiveBreaches:1}),this.addRule({name:"Disk High Usage Warning",description:"Disk usage exceeds warning threshold",enabled:!0,metric:"disk",condition:"greater_than",threshold:85,severity:"warning",suppressionDuration:10,evaluationWindow:10,consecutiveBreaches:3}),this.addRule({name:"Disk Critical Usage",description:"Disk usage exceeds critical threshold",enabled:!0,metric:"disk",condition:"greater_than",threshold:95,severity:"critical",suppressionDuration:5,evaluationWindow:5,consecutiveBreaches:2}),this.addRule({name:"High System Load",description:"System load average exceeds threshold",enabled:!0,metric:"load",condition:"greater_than",threshold:2,severity:"warning",suppressionDuration:5,evaluationWindow:5,consecutiveBreaches:3})}async sendAlert(a){let b=Array.from(this.channels.values()).filter(a=>a.enabled).map(async b=>{try{b.handler&&await b.handler(a)}catch(a){console.error(`Error sending alert through channel ${b.name}:`,a)}});await Promise.allSettled(b)}isAlertSuppressed(a){if("threshold"!==a.type||!a.metadata?.ruleId)return!1;let b=`${a.metadata.ruleId}_${a.metric}`,c=this.suppressions.get(b);return!!(c&&c.until>new Date)||(c&&this.suppressions.delete(b),!1)}addSuppression(a,b){let c=new Date(Date.now()+60*b*1e3);this.suppressions.set(`${a}`,{until:c,alertRuleId:a})}cleanupOldAlerts(){let a=new Date(new Date().getTime()-60*this.config.alertRetentionHours*6e4),b=0;for(let[c,d]of Array.from(this.alerts.entries()))new Date(d.timestamp)<a&&d.resolved&&(this.alerts.delete(c),b++);let c=Array.from(this.alerts.values()).filter(a=>!a.resolved);if(c.length>this.config.maxActiveAlerts)for(let a of c.sort((a,b)=>new Date(a.timestamp).getTime()-new Date(b.timestamp).getTime()).slice(0,c.length-this.config.maxActiveAlerts))this.alerts.delete(a.id),b++;b>0&&console.log(`Cleaned up ${b} old alerts`)}startResolutionTimer(){this.resolutionTimer=setInterval(()=>{this.checkAutoResolution()},this.config.resolutionCheckInterval)}checkAutoResolution(){let a=new Date;for(let[b,c]of Array.from(this.suppressions.entries()))c.until<=a&&this.suppressions.delete(b)}generateAlertId(){return`alert_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateRuleId(a){return`rule_${a.toLowerCase().replace(/\s+/g,"_")}_${Date.now()}`}}let V=new U,W=require("node-cron"),X=require("fs/promises"),Y=(0,O.promisify)(N.exec);class Z{async collectSystemInfo(){try{let[a,b,c,d,e,f]=await Promise.allSettled([this.collectCpuMetrics(),this.collectMemoryMetrics(),this.collectDiskMetrics(),this.collectNetworkMetrics(),this.collectBasicServices(),this.collectSecurityInfo()]);return{cpu:"fulfilled"===a.status?a.value:this.getDefaultCpuMetrics(),memory:"fulfilled"===b.status?b.value:this.getDefaultMemoryMetrics(),disk:"fulfilled"===c.status?c.value:this.getDefaultDiskMetrics(),network:"fulfilled"===d.status?d.value:this.getDefaultNetworkTests(),services:"fulfilled"===e.status?e.value:[],security:"fulfilled"===f.status?f.value:this.getDefaultSecurityAudit(),timestamp:new Date().toISOString()}}catch(a){throw Error(`System collection failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async collectCpuMetrics(){try{let a=M.cpus(),b=M.loadavg(),c=await this.getCpuUsage(),d=await this.getCpuTemperature(),{processes:e,threads:f}=await this.getProcessCounts();return{usage_percent:Math.round(100*c)/100,load_average:{one_minute:Math.round(100*b[0])/100,five_minutes:Math.round(100*b[1])/100,fifteen_minutes:Math.round(100*b[2])/100},core_count:a.length,cores_usage:await this.getPerCoreUsage(),temperature_celsius:d,frequency_mhz:a.map(a=>a.speed),processes_count:e,threads_count:f}}catch(a){return console.warn("CPU metrics collection failed:",a),this.getDefaultCpuMetrics()}}async collectMemoryMetrics(){try{let a=M.totalmem(),b=M.freemem(),c=a-b,d=await this.getDetailedMemoryInfo();return{total_gb:Math.round(a/0x40000000*100)/100,free_gb:Math.round(b/0x40000000*100)/100,used_gb:Math.round(c/0x40000000*100)/100,usage_percent:Math.round(c/a*1e4)/100,cached_gb:d.cached||0,buffers_gb:d.buffers||0,swap_total_gb:d.swapTotal||0,swap_used_gb:d.swapUsed||0,swap_usage_percent:d.swapTotal>0?Math.round(d.swapUsed/d.swapTotal*1e4)/100:0,memory_pressure:this.calculateMemoryPressure(c/a)}}catch(a){return console.warn("Memory metrics collection failed:",a),this.getDefaultMemoryMetrics()}}async collectDiskMetrics(){try{let a=await this.getMountPoints(),b=0,c=0,d=0;for(let e of a)b+=e.total_gb,c+=e.used_gb,d+=e.free_gb;let e=b>0?c/b*100:0,f=await this.getDiskIOStats();return{total_space_gb:Math.round(100*b)/100,free_space_gb:Math.round(100*d)/100,used_space_gb:Math.round(100*c)/100,usage_percent:Math.round(100*e)/100,mount_points:a,disk_health:this.assessDiskHealth(e,f.io_wait_percent),predicted_full_date:this.predictDiskFull(e),io_stats:f}}catch(a){return console.warn("Disk metrics collection failed:",a),this.getDefaultDiskMetrics()}}async collectNetworkMetrics(){try{let[a,b,c,d]=await Promise.allSettled([this.testInternetConnection(),this.testDNSResolution(),this.getNetworkInterfaces(),this.runConnectivityTests()]);return{internet_connected:"fulfilled"===a.status&&a.value,dns_resolution:"fulfilled"===b.status?b.value:{google_dns:!1,cloudflare_dns:!1,response_time_ms:0},network_interfaces:"fulfilled"===c.status?c.value:[],connectivity_tests:"fulfilled"===d.status?d.value:[],bandwidth_mbps:await this.getBandwidthEstimate()}}catch(a){return console.warn("Network metrics collection failed:",a),this.getDefaultNetworkTests()}}async getCpuUsage(){return new Promise(a=>{let b=this.cpuMeasure();setTimeout(()=>{let c=this.cpuMeasure(),d=c.idle-b.idle;a(Math.max(0,Math.min(100,100-100*d/(c.total-b.total))))},1e3)})}cpuMeasure(){let a=M.cpus(),b=0,c=0;return a.forEach(a=>{for(let b in a.times)c+=a.times[b];b+=a.times.idle}),{idle:b,total:c}}async getPerCoreUsage(){try{let{stdout:a}=await Y('top -bn1 | grep "Cpu" | head -1',{timeout:this.TIMEOUT_MS}),b=M.cpus().length,c=await this.getCpuUsage();return Array(b).fill(c)}catch{return M.cpus().map(()=>0)}}async getCpuTemperature(){try{if("linux"!==process.platform)return;let{stdout:a}=await Y('cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null || echo "0"',{timeout:this.TIMEOUT_MS}),b=parseInt(a.trim());return b>0?Math.round(b/1e3):void 0}catch{return}}async getProcessCounts(){try{let{stdout:a}=await Y("ps -eo pid,nlwp | tail -n +2",{timeout:this.TIMEOUT_MS}),b=a.trim().split("\n"),c=b.length,d=b.reduce((a,b)=>{let c=b.trim().split(/\s+/);return a+(parseInt(c[1])||1)},0);return{processes:c,threads:d}}catch{return{processes:0,threads:0}}}async getDetailedMemoryInfo(){try{if("linux"!==process.platform)return{cached:0,buffers:0,swapTotal:0,swapUsed:0};let a=(await X.readFile("/proc/meminfo","utf-8")).split("\n"),b=b=>{let c=a.find(a=>a.startsWith(b));if(!c)return 0;let d=c.match(/(\d+)/);return d?1024*parseInt(d[1]):0};return{cached:Math.round(b("Cached")/0x40000000*100)/100,buffers:Math.round(b("Buffers")/0x40000000*100)/100,swapTotal:Math.round(b("SwapTotal")/0x40000000*100)/100,swapUsed:Math.round((b("SwapTotal")-b("SwapFree"))/0x40000000*100)/100}}catch{return{cached:0,buffers:0,swapTotal:0,swapUsed:0}}}calculateMemoryPressure(a){return a<.7?"low":a<.85?"medium":"high"}async getMountPoints(){try{let{stdout:a}=await Y("df -h",{timeout:this.TIMEOUT_MS}),b=a.split("\n").slice(1),c=[];for(let a of b){if(!a.trim())continue;let b=a.trim().split(/\s+/);if(b.length<6)continue;let d=b[0],e=this.parseSize(b[1]),f=this.parseSize(b[2]),g=this.parseSize(b[3]),h=b[5];e>0&&c.push({path:h,total_gb:e,used_gb:f,free_gb:g,usage_percent:Math.round(f/e*1e4)/100,filesystem:"unknown",device:d})}return c}catch{return[]}}parseSize(a){let b=parseFloat(a);return isNaN(b)?0:a.includes("T")?1024*b:a.includes("G")?b:a.includes("M")?b/1024:a.includes("K")?b/1048576:b/0x40000000}async getDiskIOStats(){try{if("linux"===process.platform){let{stdout:a}=await Y("iostat -x 1 2 | tail -n +4",{timeout:this.TIMEOUT_MS}),b=a.trim().split("\n").filter(a=>a.trim()&&!a.includes("Device"));if(b.length>0){let a=b[b.length-1].trim().split(/\s+/);return{reads_per_sec:parseFloat(a[3])||0,writes_per_sec:parseFloat(a[4])||0,io_wait_percent:parseFloat(a[9])||0}}}return{reads_per_sec:0,writes_per_sec:0,io_wait_percent:0}}catch{return{reads_per_sec:0,writes_per_sec:0,io_wait_percent:0}}}assessDiskHealth(a,b){return a>95||b>50?"critical":a>85||b>25?"warning":"good"}predictDiskFull(a){if(a>90){let b=Math.ceil((100-a)*30),c=new Date;return c.setDate(c.getDate()+b),c.toISOString().split("T")[0]}}async testInternetConnection(){try{let{stdout:a}=await Y("ping -c 1 -W 5 8.8.8.8",{timeout:this.TIMEOUT_MS});return a.includes("1 received")}catch{return!1}}async testDNSResolution(){try{let a=Date.now(),[b,c]=await Promise.allSettled([Y("nslookup google.com 8.8.8.8",{timeout:this.TIMEOUT_MS}),Y("nslookup google.com 1.1.1.1",{timeout:this.TIMEOUT_MS})]),d=Date.now()-a;return{google_dns:"fulfilled"===b.status,cloudflare_dns:"fulfilled"===c.status,response_time_ms:d}}catch{return{google_dns:!1,cloudflare_dns:!1,response_time_ms:0}}}async getNetworkInterfaces(){try{let a=M.networkInterfaces(),b=[];for(let[c,d]of Object.entries(a)){if(!d)continue;let a=d.filter(a=>!a.internal).map(a=>a.address);a.length>0&&b.push({name:c,type:"ethernet",status:a.length>0?"up":"down",ip_addresses:a,mac_address:d[0]?.mac,mtu:1500,rx_bytes:0,tx_bytes:0,rx_packets:0,tx_packets:0,rx_errors:0,tx_errors:0})}return b}catch{return[]}}async runConnectivityTests(){let a=[];for(let b of[{target:"google.com",port:80},{target:"github.com",port:443},{target:"8.8.8.8",port:53}])try{let c=Date.now();await Y(`timeout 5 bash -c "</dev/tcp/${b.target}/${b.port}"`,{timeout:this.TIMEOUT_MS});let d=Date.now()-c;a.push({target:b.target,port:b.port,status:"success",response_time_ms:d})}catch(c){a.push({target:b.target,port:b.port,status:"failed",error:c instanceof Error?c.message:"Unknown error"})}return a}async getBandwidthEstimate(){}async collectBasicServices(){try{if("linux"!==process.platform)return[];let{stdout:a}=await Y("systemctl list-units --type=service --state=running --no-pager",{timeout:this.TIMEOUT_MS}),b=a.split("\n").slice(1),c=[];for(let a of b){if(!a.trim()||a.includes("UNIT"))continue;let b=a.trim().split(/\s+/);b.length>=4&&c.push({name:b[0].replace(".service",""),status:"active"===b[2]?"active":"inactive",enabled:!0,description:b.slice(4).join(" ")})}return c.slice(0,50)}catch{return[]}}async collectSecurityInfo(){try{let[a,b]=await Promise.allSettled([this.scanBasicPorts(),this.checkSecurityUpdates()]);return{open_ports:"fulfilled"===a.status?a.value:[],failed_logins:await this.getFailedLoginCount(),security_updates_available:"fulfilled"===b.status?b.value:0,firewall_status:await this.getFirewallStatus(),vulnerabilities:[]}}catch{return this.getDefaultSecurityAudit()}}async scanBasicPorts(){try{let{stdout:a}=await Y("netstat -tuln",{timeout:this.TIMEOUT_MS}),b=a.split("\n").slice(2),c=[];for(let a of b){if(!a.trim())continue;let b=a.trim().split(/\s+/);if(b.length>=4){let a=b[0].toLowerCase().includes("tcp")?"tcp":"udp",d=b[3].match(/:(\d+)$/);if(d){let b=parseInt(d[1]);isNaN(b)||c.push({port:b,protocol:a,state:"open"})}}}return c}catch{return[]}}async checkSecurityUpdates(){try{if("linux"===process.platform){let{stdout:a}=await Y('apt list --upgradable 2>/dev/null | wc -l || yum check-update --security 2>/dev/null | wc -l || echo "0"',{timeout:this.TIMEOUT_MS});return Math.max(0,parseInt(a.trim())-1)}return 0}catch{return 0}}async getFailedLoginCount(){try{if("linux"===process.platform){let{stdout:a}=await Y('grep "Failed password" /var/log/auth.log 2>/dev/null | tail -n 100 | wc -l || echo "0"',{timeout:this.TIMEOUT_MS});return parseInt(a.trim())||0}return 0}catch{return 0}}async getFirewallStatus(){try{let{stdout:a}=await Y('ufw status 2>/dev/null | grep "Status:" | awk "{print $2}" || echo "unknown"',{timeout:this.TIMEOUT_MS}),b=a.trim().toLowerCase();return"active"===b?"active":"inactive"===b?"inactive":"unknown"}catch{return"unknown"}}getDefaultCpuMetrics(){return{usage_percent:0,load_average:{one_minute:0,five_minutes:0,fifteen_minutes:0},core_count:M.cpus().length,cores_usage:Array(M.cpus().length).fill(0),frequency_mhz:M.cpus().map(a=>a.speed),processes_count:0,threads_count:0}}getDefaultMemoryMetrics(){let a=M.totalmem(),b=M.freemem(),c=a-b;return{total_gb:Math.round(a/0x40000000*100)/100,free_gb:Math.round(b/0x40000000*100)/100,used_gb:Math.round(c/0x40000000*100)/100,usage_percent:Math.round(c/a*1e4)/100,cached_gb:0,buffers_gb:0,swap_total_gb:0,swap_used_gb:0,swap_usage_percent:0,memory_pressure:"low"}}getDefaultDiskMetrics(){return{total_space_gb:0,free_space_gb:0,used_space_gb:0,usage_percent:0,mount_points:[],disk_health:"good",io_stats:{reads_per_sec:0,writes_per_sec:0,io_wait_percent:0}}}getDefaultNetworkTests(){return{internet_connected:!1,dns_resolution:{google_dns:!1,cloudflare_dns:!1,response_time_ms:0},connectivity_tests:[],network_interfaces:[]}}getDefaultSecurityAudit(){return{open_ports:[],failed_logins:0,security_updates_available:0,firewall_status:"unknown",vulnerabilities:[]}}constructor(){this.TIMEOUT_MS=3e4}}let $=(0,O.promisify)(N.exec);class _{async isDockerAvailable(){try{return await $("docker version",{timeout:this.TIMEOUT_MS}),!0}catch{return!1}}async collectDockerInfo(){try{if(!await this.isDockerAvailable())return{available:!1,error:"Docker is not available or accessible",timestamp:new Date().toISOString()};let a=await this.collectContainerMetrics();return{available:!0,metrics:a,timestamp:new Date().toISOString()}}catch(a){return{available:!1,error:a instanceof Error?a.message:"Unknown Docker error",timestamp:new Date().toISOString()}}}async collectContainerMetrics(){try{let[a,b,c]=await Promise.allSettled([this.getContainerInformation(),this.getDockerSystemInfo(),this.getDockerDiskUsage()]),d="fulfilled"===a.status?a.value:[],e="fulfilled"===b.status?b.value:{images_count:0,volumes_count:0,networks_count:0},f="fulfilled"===c.status?c.value:0,g=d.filter(a=>"running"===a.state).length,h=d.filter(a=>"running"!==a.state).length;return{docker_available:!0,total_containers:d.length,running_containers:g,stopped_containers:h,containers:d,images_count:e.images_count,volumes_count:e.volumes_count,networks_count:e.networks_count,disk_usage_gb:f}}catch(a){throw Error(`Docker metrics collection failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getContainerInformation(){try{let{stdout:a}=await $('docker ps -a --format "{{.ID}}|{{.Names}}|{{.Image}}|{{.Status}}|{{.State}}|{{.CreatedAt}}|{{.Ports}}"',{timeout:this.TIMEOUT_MS});if(!a.trim())return[];let b=a.trim().split("\n"),c=[];for(let a of b){let[b,d,e,f,g,h,i]=a.split("|"),j=null;if("running"===g)try{let{stdout:a}=await $(`docker stats ${b} --no-stream --format "{{.CPUPerc}}|{{.MemUsage}}|{{.NetIO}}"`,{timeout:this.TIMEOUT_MS});j=this.parseContainerStats(a.trim())}catch{}let k=await this.getRestartCount(b),l={id:b.substring(0,12),name:d.startsWith("/")?d.substring(1):d,image:e,status:f,state:g,created:h,ports:i?i.split(",").map(a=>a.trim()).filter(Boolean):[],restart_count:k,...j};c.push(l)}return c}catch(a){return console.warn("Container information collection failed:",a),[]}}parseContainerStats(a){try{let[b,c,d]=a.split("|"),e=parseFloat(b.replace("%","")),f=c.match(/([\d.]+)(\w+)\s*\/\s*([\d.]+)(\w+)/),g=0,h=0;if(f){let[,a,b,c,d]=f;g=this.convertToMB(parseFloat(a),b),h=this.convertToMB(parseFloat(c),d)}let i=d.match(/([\d.]+)(\w+)\s*\/\s*([\d.]+)(\w+)/),j=0,k=0;if(i){let[,a,b,c,d]=i;j=this.convertToMB(parseFloat(a),b),k=this.convertToMB(parseFloat(c),d)}return{cpu_usage_percent:isNaN(e)?void 0:Math.round(100*e)/100,memory_usage_mb:g>0?Math.round(100*g)/100:void 0,memory_limit_mb:h>0?Math.round(100*h)/100:void 0,network_rx_mb:j>0?Math.round(100*j)/100:void 0,network_tx_mb:k>0?Math.round(100*k)/100:void 0}}catch{return{}}}convertToMB(a,b){switch(b.toLowerCase()){case"b":return a/1048576;case"kb":case"kib":return a/1024;case"mb":case"mib":default:return a;case"gb":case"gib":return 1024*a;case"tb":case"tib":return 1024*a*1024}}async getRestartCount(a){try{let{stdout:b}=await $(`docker inspect ${a} --format "{{.RestartCount}}"`,{timeout:this.TIMEOUT_MS});return parseInt(b.trim())||0}catch{return 0}}async getDockerSystemInfo(){try{let[a,b,c]=await Promise.allSettled([$('docker images --format "{{.Repository}}" | wc -l',{timeout:this.TIMEOUT_MS}),$('docker volume ls --format "{{.Name}}" | wc -l',{timeout:this.TIMEOUT_MS}),$('docker network ls --format "{{.Name}}" | wc -l',{timeout:this.TIMEOUT_MS})]);return{images_count:"fulfilled"===a.status&&parseInt(a.value.stdout.trim())||0,volumes_count:"fulfilled"===b.status&&parseInt(b.value.stdout.trim())||0,networks_count:"fulfilled"===c.status?Math.max(0,(parseInt(c.value.stdout.trim())||0)-3):0}}catch{return{images_count:0,volumes_count:0,networks_count:0}}}async getDockerDiskUsage(){try{let{stdout:a}=await $('docker system df --format "table {{.Type}}\\t{{.Size}}" | tail -n +2',{timeout:this.TIMEOUT_MS}),b=0;for(let c of a.trim().split("\n")){let a=c.split("	");if(a.length>=2){let c=a[1],d=this.parseSizeToGB(c);b+=d}}return Math.round(100*b)/100}catch{return 0}}parseSizeToGB(a){let b=a.match(/([\d.]+)\s*([KMGT]?B)/i);if(!b)return 0;let c=parseFloat(b[1]);switch(b[2].toUpperCase()){case"B":return c/0x40000000;case"KB":return c/1048576;case"MB":return c/1024;case"GB":default:return c;case"TB":return 1024*c}}async getContainerLogs(a,b=100){try{let{stdout:c}=await $(`docker logs --tail ${b} ${a}`,{timeout:this.TIMEOUT_MS});return c.split("\n").filter(a=>a.trim())}catch{return[]}}async getRecentDockerEvents(a="1h"){try{let{stdout:b}=await $(`docker events --since ${a} --format "{{.Time}} {{.Action}} {{.Type}} {{.Actor.Attributes.name}}"`,{timeout:this.TIMEOUT_MS});return b.split("\n").filter(a=>a.trim())}catch{return[]}}async getContainerHealthIssues(){try{let a=await this.getContainerInformation(),b=[];for(let c of a){if(c.restart_count>10&&b.push({container_id:c.id,container_name:c.name,issue:`High restart count: ${c.restart_count} restarts`,severity:c.restart_count>50?"critical":"high"}),c.cpu_usage_percent&&c.cpu_usage_percent>80&&b.push({container_id:c.id,container_name:c.name,issue:`High CPU usage: ${c.cpu_usage_percent.toFixed(1)}%`,severity:c.cpu_usage_percent>95?"critical":"high"}),c.memory_usage_mb&&c.memory_limit_mb){let a=c.memory_usage_mb/c.memory_limit_mb*100;a>85&&b.push({container_id:c.id,container_name:c.name,issue:`High memory usage: ${a.toFixed(1)}%`,severity:a>95?"critical":"high"})}"running"===c.state||c.status.includes("Exited (0)")||b.push({container_id:c.id,container_name:c.name,issue:`Container not running: ${c.status}`,severity:"medium"})}return b}catch{return[]}}async getDockerComposeStatus(a){try{let b=a?`docker-compose -f ${a} ps --format json`:"docker-compose ps --format json",{stdout:c}=await $(b,{timeout:this.TIMEOUT_MS});if(!c.trim())return[];return c.split("\n").filter(a=>a.trim()).map(a=>{try{let b=JSON.parse(a);return{service_name:b.Service||b.Name,status:b.State||"unknown",health:this.determineServiceHealth(b.State,b.Health)}}catch{return null}}).filter(Boolean)}catch{return[]}}determineServiceHealth(a,b){if(b){if(b.toLowerCase().includes("healthy"))return"healthy";if(b.toLowerCase().includes("unhealthy"))return"unhealthy"}return"running"===a||"Up"===a?"healthy":"exited"===a||"dead"===a||"restarting"===a?"unhealthy":"unknown"}constructor(){this.TIMEOUT_MS=3e4}}let aa=(0,O.promisify)(N.exec);class ab{async collectServiceHealth(){try{let a=await this.collectSystemServices(),b=a.filter(a=>"failed"===a.status).length,c=a.filter(a=>!a.enabled).length;return{services:a,system_services_count:a.length,failed_services_count:b,disabled_services_count:c,timestamp:new Date().toISOString()}}catch(a){throw Error(`Service collection failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async collectSystemServices(){try{let a=[];if("linux"===process.platform){let b=await this.getSystemdServices();a.push(...b)}else{let b=await this.getProcessBasedServices();a.push(...b)}return a}catch(a){return console.warn("System service collection failed:",a),[]}}async getSystemdServices(){try{let{stdout:a}=await aa("systemctl list-units --type=service --all --no-pager --output=json",{timeout:this.TIMEOUT_MS}),b=[];try{let c=JSON.parse(a);b=await this.parseSystemdJsonOutput(c)}catch{b=await this.parseSystemdTextOutput()}return b=await this.enrichServiceDetails(b)}catch(a){return console.warn("Systemd service collection failed:",a),await this.getBasicSystemdServices()}}async parseSystemdJsonOutput(a){let b=[];for(let c of a){if(!c.unit||!c.unit.endsWith(".service"))continue;let a=c.unit.replace(".service",""),d=this.mapSystemdStatus(c.active,c.sub);b.push({name:a,status:d,enabled:await this.isServiceEnabled(a),description:c.description||"No description available"})}return b}async parseSystemdTextOutput(){try{let{stdout:a}=await aa("systemctl list-units --type=service --all --no-pager",{timeout:this.TIMEOUT_MS}),b=a.split("\n"),c=[];for(let a of b){if(!a.includes(".service")||a.includes("UNIT"))continue;let b=a.trim().split(/\s+/);if(b.length<4)continue;let d=b[0].replace(".service",""),e=b[1],f=b[2],g=b[3],h=b.slice(4).join(" ");if("loaded"===e){let a=this.mapSystemdStatus(f,g);c.push({name:d,status:a,enabled:await this.isServiceEnabled(d),description:h||"No description available"})}}return c}catch{return[]}}async getBasicSystemdServices(){try{let{stdout:a}=await aa('systemctl list-unit-files --type=service --no-pager | grep -E "\\.service\\s+(enabled|disabled)"',{timeout:this.TIMEOUT_MS}),b=a.split("\n"),c=[];for(let a of b){let b=a.trim().split(/\s+/);if(b.length>=2){let a=b[0].replace(".service",""),d="enabled"===b[1],e=await this.getServiceStatus(a);c.push({name:a,status:e,enabled:d,description:"Service description not available"})}}return c.slice(0,100)}catch{return[]}}async getServiceStatus(a){try{let{stdout:b}=await aa(`systemctl is-active ${a}`,{timeout:this.TIMEOUT_MS}),c=b.trim().toLowerCase();return this.mapSystemdStatus(c,"")}catch{return"unknown"}}mapSystemdStatus(a,b){let c=a.toLowerCase(),d=b.toLowerCase();return"active"===c?"active":"inactive"===c?"inactive":"failed"===c||"failed"===d?"failed":"unknown"}async isServiceEnabled(a){try{let{stdout:b}=await aa(`systemctl is-enabled ${a}`,{timeout:this.TIMEOUT_MS});return"enabled"===b.trim().toLowerCase()}catch{return!1}}async enrichServiceDetails(a){let b=[];for(let c of a)try{let a={...c},d=await this.getServiceDetails(c.name);a.uptime=d.uptime,a.memory_usage=d.memory_usage,a.cpu_usage=d.cpu_usage,a.pid=d.pid,a.restart_count=d.restart_count,b.push(a)}catch{b.push(c)}return b}async getServiceDetails(a){try{let[b,c]=await Promise.allSettled([aa(`systemctl show ${a} --property=ActiveEnterTimestamp,MainPID`,{timeout:this.TIMEOUT_MS}),aa(`systemctl show ${a} --property=CPUUsageNSec,MemoryCurrent`,{timeout:this.TIMEOUT_MS})]),d={};if("fulfilled"===b.status)for(let a of b.value.stdout.split("\n")){let[b,c]=a.split("=");if("MainPID"===b&&c&&"0"!==c)d.pid=parseInt(c);else if("ActiveEnterTimestamp"===b&&c){let a=new Date(c),b=Date.now()-a.getTime();b>0&&(d.uptime=this.formatUptime(b))}}if("fulfilled"===c.status)for(let a of c.value.stdout.split("\n")){let[b,c]=a.split("=");if("MemoryCurrent"===b&&c&&"[not set]"!==c){let a=parseInt(c);!isNaN(a)&&a>0&&(d.memory_usage=Math.round(a/1048576))}else if("CPUUsageNSec"===b&&c&&"[not set]"!==c){let a=parseInt(c);!isNaN(a)&&a>0&&(d.cpu_usage=Math.round(a/1e9/60*100)/100)}}try{let{stdout:b}=await aa(`systemctl show ${a} --property=NRestarts`,{timeout:this.TIMEOUT_MS}),c=b.match(/NRestarts=(\d+)/);c&&(d.restart_count=parseInt(c[1]))}catch{}return d}catch{return{}}}formatUptime(a){let b=Math.floor(a/1e3),c=Math.floor(b/60),d=Math.floor(c/60),e=Math.floor(d/24);return e>0?`${e}d ${d%24}h ${c%60}m`:d>0?`${d}h ${c%60}m`:c>0?`${c}m ${b%60}s`:`${b}s`}async getProcessBasedServices(){try{let{stdout:a}=await aa("ps aux",{timeout:this.TIMEOUT_MS}),b=a.split("\n").slice(1),c=new Map,d=[{pattern:/nginx/,name:"nginx",description:"Web server"},{pattern:/apache|httpd/,name:"apache",description:"Apache web server"},{pattern:/mysql|mysqld/,name:"mysql",description:"MySQL database server"},{pattern:/postgres/,name:"postgresql",description:"PostgreSQL database server"},{pattern:/redis-server/,name:"redis",description:"Redis key-value store"},{pattern:/mongodb|mongod/,name:"mongodb",description:"MongoDB database server"},{pattern:/docker/,name:"docker",description:"Docker container runtime"},{pattern:/ssh/,name:"ssh",description:"SSH daemon"},{pattern:/cron/,name:"cron",description:"Cron scheduler"}];for(let a of b){let b=a.trim().split(/\s+/);if(b.length<11)continue;let e=b[1],f=parseFloat(b[2])||0,g=parseFloat(b[3])||0,h=b.slice(10).join(" ");for(let{pattern:a,name:b,description:i}of d)if(a.test(h.toLowerCase())){c.has(b)||c.set(b,{name:b,status:"active",enabled:!0,description:i,pid:parseInt(e),cpu_usage:f,memory_usage:Math.round(g*("darwin"===process.platform?1:1024)/1024)});break}}return Array.from(c.values())}catch{return[]}}async getCriticalServices(){let a=["sshd","systemd","networkd","resolved","dbus","cron","rsyslog","ufw","fail2ban","nginx","apache2","httpd","mysql","mysqld","postgresql","redis","docker","containerd"];try{return(await this.collectSystemServices()).filter(b=>a.some(a=>b.name.toLowerCase().includes(a.toLowerCase())))}catch{return[]}}async getServicesWithIssues(){try{let a=await this.collectSystemServices(),b=[];for(let c of a){let a=[],d="low";"failed"===c.status&&(a.push("Service is in failed state"),d="critical"),c.cpu_usage&&c.cpu_usage>50&&(a.push(`High CPU usage: ${c.cpu_usage.toFixed(1)}%`),d=c.cpu_usage>90?"critical":"high"),c.memory_usage&&c.memory_usage>1024&&(a.push(`High memory usage: ${c.memory_usage}MB`),"low"===d&&(d="medium")),c.restart_count&&c.restart_count>5&&(a.push(`High restart count: ${c.restart_count} restarts`),d=c.restart_count>20?"high":"medium"),["sshd","networkd","systemd"].includes(c.name)&&"inactive"===c.status&&(a.push("Critical service is inactive"),d="high"),a.length>0&&b.push({service:c,issues:a,severity:d})}return b.sort((a,b)=>{let c={critical:4,high:3,medium:2,low:1};return c[b.severity]-c[a.severity]})}catch{return[]}}async getServiceStartupAnalysis(){if("linux"!==process.platform)return[];try{let{stdout:a}=await aa("systemd-analyze blame --no-pager | head -50",{timeout:this.TIMEOUT_MS}),b=[];for(let c of a.split("\n")){let a=c.match(/^\s*(\d+(?:\.\d+)?)(m?s)\s+(.+\.service)/);if(a){let[,c,d,e]=a,f="s"===d?1e3*parseFloat(c):parseFloat(c),g=await this.getServiceDependencies(e);b.push({service_name:e.replace(".service",""),startup_time_ms:f,dependencies:g.requires,dependents:g.requiredBy})}}return b}catch{return[]}}async getServiceDependencies(a){try{let[b,c]=await Promise.allSettled([aa(`systemctl list-dependencies ${a} --plain --no-pager`,{timeout:this.TIMEOUT_MS}),aa(`systemctl list-dependencies ${a} --reverse --plain --no-pager`,{timeout:this.TIMEOUT_MS})]),d=a=>a.split("\n").filter(a=>a.includes(".service")).map(a=>a.replace(/.*●\s*/,"").replace(".service","").trim()).filter(Boolean).slice(0,10);return{requires:"fulfilled"===b.status?d(b.value.stdout):[],requiredBy:"fulfilled"===c.status?d(c.value.stdout):[]}}catch{return{requires:[],requiredBy:[]}}}constructor(){this.TIMEOUT_MS=3e4}}!function(){var a=Error("Cannot find module '@anthropic/claude-code-sdk'");throw a.code="MODULE_NOT_FOUND",a}();class ac{constructor(){}async analyzeHealth(a,b,c){try{c.push(`[${new Date().toISOString()}] Starting AI-powered health analysis...`);let d=this.calculateBaseHealthScore(a);c.push(`[${new Date().toISOString()}] Base health score calculated: ${d}/100`);let e=this.determineOverallHealth(a,d);c.push(`[${new Date().toISOString()}] Overall health status: ${e}`);let f=this.identifyCriticalIssues(a);c.push(`[${new Date().toISOString()}] Critical issues identified: ${f.length}`);let g=await this.generateAnalysis(a,b,c);return{overall_health:e,health_score:d,ai_analysis:g,critical_issues:f,warnings:this.identifyWarnings(a),recommendations:g.recommendations,cost:g.cost||0,usage:g.usage||{input_tokens:0,output_tokens:0,cache_creation_tokens:0,cache_read_tokens:0},model_used:g.model_used||"claude-3-5-sonnet-20241022",duration:g.duration||0}}catch(b){return c.push(`[${new Date().toISOString()}] Health analysis error: ${b instanceof Error?b.message:"Unknown error"}`),{overall_health:"warning",health_score:50,ai_analysis:this.createFallbackAnalysis(a),critical_issues:["Health analysis failed - manual review required"],warnings:["Unable to perform complete system analysis"],recommendations:[]}}}calculateBaseHealthScore(a){let b=100,c={},d=a.system_metrics.cpu.usage_percent;d>90?c.cpu_critical=25:d>75?c.cpu_high=15:d>50&&(c.cpu_medium=5);let e=a.system_metrics.memory.usage_percent;e>95?c.memory_critical=30:e>85?c.memory_high=20:e>70&&(c.memory_medium=10);let f=a.system_metrics.disk.usage_percent;f>95?c.disk_critical=25:f>85?c.disk_high=15:f>75&&(c.disk_medium=8);let g=a.service_metrics.failed_services_count;g>5?c.services_critical=20:g>2?c.services_high=10:g>0&&(c.services_medium=5),a.system_metrics.network.internet_connected||(c.network_critical=15);let h=a.system_metrics.security.open_ports.length,i=a.system_metrics.security.security_updates_available;if(i>10?c.security_high=10:i>5&&(c.security_medium=5),h>20&&(c.ports_medium=5),a.docker_metrics?.available&&a.docker_metrics.metrics){let b=a.docker_metrics.metrics.running_containers,d=a.docker_metrics.metrics.total_containers;if(d>0){let a=b/d;a<.5?c.docker_high=15:a<.8&&(c.docker_medium=8)}}return Math.round(b=Math.max(0,b-Object.values(c).reduce((a,b)=>a+b,0)))}determineOverallHealth(a,b){return a.system_metrics.memory.usage_percent>95||a.system_metrics.disk.usage_percent>95||a.service_metrics.failed_services_count>5||b<30?"critical":a.system_metrics.cpu.usage_percent>80||a.system_metrics.memory.usage_percent>85||a.system_metrics.disk.usage_percent>85||a.service_metrics.failed_services_count>0||!a.system_metrics.network.internet_connected||b<70?"warning":"healthy"}identifyCriticalIssues(a){let b=[];a.system_metrics.memory.usage_percent>95&&b.push(`Critical memory usage: ${a.system_metrics.memory.usage_percent.toFixed(1)}%`),a.system_metrics.disk.usage_percent>95&&b.push(`Critical disk usage: ${a.system_metrics.disk.usage_percent.toFixed(1)}%`),a.service_metrics.failed_services_count>0&&b.push(`${a.service_metrics.failed_services_count} system services have failed`),a.system_metrics.network.internet_connected||b.push("Internet connectivity is unavailable");let c=a.system_metrics.cpu.load_average.fifteen_minutes,d=a.system_metrics.cpu.core_count;return c>2*d&&b.push(`System load is critically high: ${c.toFixed(2)} (${d} cores)`),a.system_metrics.security.security_updates_available>10&&b.push(`${a.system_metrics.security.security_updates_available} security updates available`),b}identifyWarnings(a){let b=[];if(a.system_metrics.cpu.usage_percent>75&&b.push(`High CPU usage: ${a.system_metrics.cpu.usage_percent.toFixed(1)}%`),a.system_metrics.memory.usage_percent>80&&b.push(`High memory usage: ${a.system_metrics.memory.usage_percent.toFixed(1)}%`),a.system_metrics.disk.usage_percent>80&&b.push(`High disk usage: ${a.system_metrics.disk.usage_percent.toFixed(1)}%`),a.system_metrics.memory.swap_usage_percent>50&&b.push(`High swap usage: ${a.system_metrics.memory.swap_usage_percent.toFixed(1)}%`),a.system_metrics.security.open_ports.length>15&&b.push(`Many open ports detected: ${a.system_metrics.security.open_ports.length}`),a.docker_metrics?.available&&a.docker_metrics.metrics){let c=a.docker_metrics.metrics;c.total_containers>c.running_containers+c.stopped_containers&&b.push("Some containers are in an unknown state")}return b}async generateAnalysis(a,b,c){try{c.push(`[${new Date().toISOString()}] Generating AI analysis with depth: ${b.options.ai_analysis_depth}`);let d=this.buildAnalysisPrompt(a,b),e=this.getAnalysisSystemPrompt();c.push(`[${new Date().toISOString()}] Calling Claude Code SDK for analysis...`);let f=Object(function(){var a=Error("Cannot find module '@anthropic/claude-code-sdk'");throw a.code="MODULE_NOT_FOUND",a}())({prompt:d,options:{customSystemPrompt:e,model:"claude-3-5-sonnet-20241022"}}),g="",h={input_tokens:0,output_tokens:0,cache_creation_input_tokens:0,cache_read_input_tokens:0},i=0;for await(let a of f)if("assistant"===a.type){let b=a.message.content;Array.isArray(b)&&(g+=b.filter(a=>"text"===a.type).map(a=>a.text).join(""))}else"result"===a.type&&"success"===a.subtype&&(h=a.usage,i=a.total_cost_usd);c.push(`[${new Date().toISOString()}] AI analysis completed. Cost: $${i}, Tokens: ${h.input_tokens}/${h.output_tokens}`);try{let b=JSON.parse(g);return{...this.parseAIAnalysisResult(b,a),cost:i,usage:h,model_used:"claude-3-5-sonnet-20241022",duration:Date.now()-Date.now()}}catch(b){return c.push(`[${new Date().toISOString()}] Failed to parse AI response as JSON, using text analysis`),{...this.parseTextAnalysisResult(g,a),cost:i,usage:h,model_used:"claude-3-5-sonnet-20241022",duration:0}}}catch(b){return c.push(`[${new Date().toISOString()}] AI analysis error: ${b instanceof Error?b.message:"Unknown error"}`),c.push(`[${new Date().toISOString()}] Falling back to rule-based analysis`),this.createRuleBasedAnalysis(a)}}buildAnalysisPrompt(a,b){let c=b.options.ai_analysis_depth||"detailed";return`
Please analyze the following system health data and provide comprehensive insights:

SYSTEM METRICS:
- CPU Usage: ${a.system_metrics.cpu.usage_percent.toFixed(1)}% (${a.system_metrics.cpu.core_count} cores)
- Load Average: ${a.system_metrics.cpu.load_average.one_minute.toFixed(2)}, ${a.system_metrics.cpu.load_average.five_minutes.toFixed(2)}, ${a.system_metrics.cpu.load_average.fifteen_minutes.toFixed(2)}
- Memory Usage: ${a.system_metrics.memory.usage_percent.toFixed(1)}% (${a.system_metrics.memory.used_gb.toFixed(1)}GB / ${a.system_metrics.memory.total_gb.toFixed(1)}GB)
- Disk Usage: ${a.system_metrics.disk.usage_percent.toFixed(1)}% (${a.system_metrics.disk.used_space_gb.toFixed(1)}GB / ${a.system_metrics.disk.total_space_gb.toFixed(1)}GB)
- Swap Usage: ${a.system_metrics.memory.swap_usage_percent.toFixed(1)}%

NETWORK STATUS:
- Internet Connected: ${a.system_metrics.network.internet_connected?"Yes":"No"}
- DNS Resolution: Google ${a.system_metrics.network.dns_resolution.google_dns?"OK":"Failed"}, Cloudflare ${a.system_metrics.network.dns_resolution.cloudflare_dns?"OK":"Failed"}

SERVICES:
- Total Services: ${a.service_metrics.system_services_count}
- Failed Services: ${a.service_metrics.failed_services_count}
- Service Issues: ${a.service_metrics.services.filter(a=>"failed"===a.status).map(a=>a.name).join(", ")||"None"}

SECURITY:
- Open Ports: ${a.system_metrics.security.open_ports.length}
- Security Updates Available: ${a.system_metrics.security.security_updates_available}
- Firewall Status: ${a.system_metrics.security.firewall_status}

${a.docker_metrics?.available?`
DOCKER STATUS:
- Total Containers: ${a.docker_metrics.metrics?.total_containers||0}
- Running Containers: ${a.docker_metrics.metrics?.running_containers||0}
- Docker Disk Usage: ${a.docker_metrics.metrics?.disk_usage_gb?.toFixed(1)||0}GB
`:"DOCKER: Not available or not accessible"}

ANALYSIS REQUEST:
Analysis Depth: ${c}
Focus Areas: ${b.options.include_security_scan?"Include security analysis":"Basic analysis"}, ${b.options.detailed_service_analysis?"detailed service analysis":"basic service analysis"}

Please provide:
1. A comprehensive summary of system health
2. Specific actionable recommendations prioritized by impact and urgency
3. Trend analysis based on current metrics
4. Alert identification with severity levels
5. Health score justification (0-100)
6. Priority actions that should be taken immediately

Format the response as a JSON object with the following structure:
{
  "summary": "Overall system health assessment",
  "health_score": 85,
  "recommendations": [
    {
      "category": "performance|security|maintenance|cost_optimization|monitoring",
      "priority": "low|medium|high|critical", 
      "title": "Recommendation title",
      "description": "Detailed description",
      "action_items": ["Specific action 1", "Specific action 2"],
      "estimated_impact": "low|medium|high",
      "implementation_difficulty": "easy|moderate|hard"
    }
  ],
  "trends": [
    {
      "metric": "CPU usage",
      "trend": "improving|stable|degrading|volatile",
      "timeframe": "Current observation",
      "current_value": 45.2,
      "analysis": "Trend explanation"
    }
  ],
  "alerts": [
    {
      "level": "info|warning|error|critical",
      "category": "performance|security|maintenance",
      "message": "Alert message",
      "affected_component": "CPU|Memory|Disk|Network|Services",
      "recommended_action": "Specific action to take",
      "urgency": "low|medium|high|immediate",
      "auto_resolvable": true|false
    }
  ],
  "priority_actions": ["Action 1", "Action 2", "Action 3"]
}
`}getAnalysisSystemPrompt(){return`
You are an expert system administrator and infrastructure monitoring specialist. You analyze system health data to provide actionable insights and recommendations.

ANALYSIS PRINCIPLES:
- Prioritize critical issues that could cause system failures
- Consider resource trends and usage patterns
- Factor in security implications of system state  
- Provide specific, actionable recommendations
- Balance system performance with stability and security
- Consider the interconnections between system components

RECOMMENDATION GUIDELINES:
- Make recommendations specific and actionable
- Include exact commands or configuration changes when appropriate
- Consider the impact and difficulty of implementation
- Prioritize based on urgency and business impact
- Provide alternative solutions when possible

SEVERITY ASSESSMENT:
- Critical: Immediate system failure risk or security breach
- High: Significant performance degradation or security risk
- Medium: Performance concerns or minor security issues
- Low: Optimization opportunities or preventive measures

OUTPUT FORMAT:
Always respond with valid JSON matching the requested structure. Be precise with metrics and practical with recommendations.
`}createRuleBasedAnalysis(a){let b=this.calculateBaseHealthScore(a),c=[],d=[],e=[];this.generatePerformanceRecommendations(a,c),this.generateSecurityRecommendations(a,c),this.generateMaintenanceRecommendations(a,c),this.generateSystemAlerts(a,d),this.generateTrendAnalysis(a,e);let f=this.generateSystemSummary(a,b),g=c.filter(a=>"critical"===a.priority||"high"===a.priority).slice(0,5).map(a=>a.title);return{summary:f,recommendations:c,trends:e,alerts:d,health_score:b,priority_actions:g}}parseAIAnalysisResult(a,b){try{return{summary:a.summary||"System analysis completed",recommendations:(a.recommendations||[]).map(a=>({category:a.category||"maintenance",priority:a.priority||"medium",title:a.title||"System optimization",description:a.description||"No description provided",action_items:Array.isArray(a.action_items)?a.action_items:[],estimated_impact:a.estimated_impact||"medium",implementation_difficulty:a.implementation_difficulty||"moderate"})),trends:(a.trends||[]).map(a=>({metric:a.metric||"Unknown",trend:a.trend||"stable",timeframe:a.timeframe||"Current",current_value:a.current_value||0,analysis:a.analysis||"No analysis available"})),alerts:(a.alerts||[]).map(a=>({level:a.level||"info",category:a.category||"maintenance",message:a.message||"System alert",affected_component:a.affected_component||"System",recommended_action:a.recommended_action,urgency:a.urgency||"medium",auto_resolvable:!0===a.auto_resolvable})),health_score:a.health_score||this.calculateBaseHealthScore(b),priority_actions:Array.isArray(a.priority_actions)?a.priority_actions:[]}}catch{return this.createFallbackAnalysis(b)}}parseTextAnalysisResult(a,b){let c=a.substring(0,500)+(a.length>500?"...":""),d=[],e=[];return b.system_metrics.cpu.usage_percent>80&&d.push({category:"performance",priority:"high",title:"Reduce CPU usage",description:`CPU usage is high at ${b.system_metrics.cpu.usage_percent.toFixed(1)}%`,action_items:["Identify high CPU processes","Consider scaling or optimization"],estimated_impact:"high",implementation_difficulty:"moderate"}),b.system_metrics.memory.usage_percent>85&&e.push({level:"warning",category:"performance",message:`High memory usage: ${b.system_metrics.memory.usage_percent.toFixed(1)}%`,affected_component:"Memory",urgency:"high",auto_resolvable:!1}),{summary:c,recommendations:d,trends:[],alerts:e,health_score:this.calculateBaseHealthScore(b),priority_actions:d.slice(0,3).map(a=>a.title)}}createFallbackAnalysis(a){let b=this.calculateBaseHealthScore(a),c=this.identifyCriticalIssues(a),d=this.identifyWarnings(a),e=[],f=[];return a.system_metrics.disk.usage_percent>80&&e.push({category:"maintenance",priority:"high",title:"Free up disk space",description:`Disk usage is at ${a.system_metrics.disk.usage_percent.toFixed(1)}%`,action_items:["Clean temporary files","Remove old log files","Uninstall unused packages"],estimated_impact:"high",implementation_difficulty:"easy"}),a.system_metrics.security.security_updates_available>0&&e.push({category:"security",priority:"medium",title:"Install security updates",description:`${a.system_metrics.security.security_updates_available} security updates available`,action_items:["sudo apt update && sudo apt upgrade"],estimated_impact:"high",implementation_difficulty:"easy"}),c.forEach(a=>{f.push({level:"critical",category:"performance",message:a,affected_component:"System",urgency:"immediate",auto_resolvable:!1})}),d.forEach(a=>{f.push({level:"warning",category:"performance",message:a,affected_component:"System",urgency:"medium",auto_resolvable:!1})}),{summary:`System health analysis completed. Health score: ${b}/100. ${c.length} critical issues and ${d.length} warnings identified.`,recommendations:e,trends:[],alerts:f,health_score:b,priority_actions:c.slice(0,3)}}generatePerformanceRecommendations(a,b){let c=a.system_metrics.cpu.usage_percent,d=a.system_metrics.memory.usage_percent,e=a.system_metrics.disk.usage_percent;c>80&&b.push({category:"performance",priority:c>95?"critical":"high",title:"Optimize CPU Usage",description:`CPU usage is at ${c.toFixed(1)}%, which may impact system performance`,action_items:["Identify processes consuming high CPU","Consider process optimization or scaling","Review system resource allocation"],estimated_impact:"high",implementation_difficulty:"moderate"}),d>85&&b.push({category:"performance",priority:d>95?"critical":"high",title:"Address Memory Pressure",description:`Memory usage is at ${d.toFixed(1)}%, risking system stability`,action_items:["Identify memory-intensive processes","Clear unnecessary cached data","Consider adding more RAM"],estimated_impact:"high",implementation_difficulty:"easy"}),e>85&&b.push({category:"performance",priority:e>95?"critical":"high",title:"Free Disk Space",description:`Disk usage is at ${e.toFixed(1)}%, approaching capacity limits`,action_items:["Clean temporary files and logs","Remove old backups and snapshots","Uninstall unused applications"],estimated_impact:"high",implementation_difficulty:"easy"})}generateSecurityRecommendations(a,b){let c=a.system_metrics.security;c.security_updates_available>0&&b.push({category:"security",priority:c.security_updates_available>10?"critical":"medium",title:"Install Security Updates",description:`${c.security_updates_available} security updates are available`,action_items:["Run system update command","Schedule automatic security updates","Verify critical services after updates"],estimated_impact:"high",implementation_difficulty:"easy"}),"active"!==c.firewall_status&&b.push({category:"security",priority:"high",title:"Enable Firewall",description:"System firewall is not active, leaving system exposed",action_items:["Enable and configure firewall","Review and restrict open ports","Set up intrusion detection"],estimated_impact:"high",implementation_difficulty:"moderate"}),c.open_ports.length>15&&b.push({category:"security",priority:"medium",title:"Review Open Ports",description:`${c.open_ports.length} ports are open, review for necessity`,action_items:["Audit open ports and services","Close unnecessary ports","Implement port access controls"],estimated_impact:"medium",implementation_difficulty:"moderate"})}generateMaintenanceRecommendations(a,b){a.service_metrics.failed_services_count>0&&b.push({category:"maintenance",priority:"high",title:"Fix Failed Services",description:`${a.service_metrics.failed_services_count} system services have failed`,action_items:["Investigate service failure logs","Restart or reconfigure failed services","Set up service monitoring alerts"],estimated_impact:"high",implementation_difficulty:"moderate"}),a.system_metrics.memory.swap_usage_percent>50&&b.push({category:"maintenance",priority:"medium",title:"Reduce Swap Usage",description:`Swap usage is at ${a.system_metrics.memory.swap_usage_percent.toFixed(1)}%`,action_items:["Identify processes using swap","Optimize memory usage","Consider increasing RAM"],estimated_impact:"medium",implementation_difficulty:"moderate"})}generateSystemAlerts(a,b){a.system_metrics.cpu.usage_percent>90&&b.push({level:"critical",category:"performance",message:`Critical CPU usage: ${a.system_metrics.cpu.usage_percent.toFixed(1)}%`,affected_component:"CPU",recommended_action:"Identify and optimize high CPU processes immediately",urgency:"immediate",auto_resolvable:!1}),a.system_metrics.memory.usage_percent>95&&b.push({level:"critical",category:"performance",message:`Critical memory usage: ${a.system_metrics.memory.usage_percent.toFixed(1)}%`,affected_component:"Memory",recommended_action:"Free memory or restart services to prevent system crash",urgency:"immediate",auto_resolvable:!1}),a.system_metrics.network.internet_connected||b.push({level:"error",category:"network",message:"Internet connectivity is unavailable",affected_component:"Network",recommended_action:"Check network configuration and connectivity",urgency:"high",auto_resolvable:!1}),a.service_metrics.failed_services_count>0&&b.push({level:"warning",category:"services",message:`${a.service_metrics.failed_services_count} system services have failed`,affected_component:"Services",recommended_action:"Investigate and restart failed services",urgency:"medium",auto_resolvable:!1})}generateTrendAnalysis(a,b){b.push({metric:"CPU Usage",trend:a.system_metrics.cpu.usage_percent>75?"degrading":"stable",timeframe:"Current observation",current_value:a.system_metrics.cpu.usage_percent,analysis:`CPU usage is currently ${a.system_metrics.cpu.usage_percent.toFixed(1)}%`}),b.push({metric:"Memory Usage",trend:a.system_metrics.memory.usage_percent>80?"degrading":"stable",timeframe:"Current observation",current_value:a.system_metrics.memory.usage_percent,analysis:`Memory usage is currently ${a.system_metrics.memory.usage_percent.toFixed(1)}%`}),b.push({metric:"Disk Usage",trend:a.system_metrics.disk.usage_percent>85?"degrading":"stable",timeframe:"Current observation",current_value:a.system_metrics.disk.usage_percent,analysis:`Disk usage is currently ${a.system_metrics.disk.usage_percent.toFixed(1)}%`})}generateSystemSummary(a,b){let c=this.identifyCriticalIssues(a).length,d=this.identifyWarnings(a).length;return`System health is ${b>80?"good":b>60?"fair":"poor"} with a score of ${b}/100. Found ${c} critical issues and ${d} warnings that need attention. ${a.system_metrics.network.internet_connected?"Network connectivity is available.":"Network connectivity issues detected."} ${0===a.service_metrics.failed_services_count?"All system services are running normally.":`${a.service_metrics.failed_services_count} system services have failed and require attention.`}`}}class ad{constructor(){this.systemCollector=new Z,this.dockerCollector=new _,this.serviceCollector=new ab,this.healthAnalyzer=new ac}async execute(a={}){let b=(0,D.sX)(),c=Date.now(),d={execution_id:b,agent_type:"system-health",started_at:new Date().toISOString(),options:{timeout_ms:3e5,max_retries:2,include_docker:!0,include_security_scan:!0,detailed_service_analysis:!0,historical_comparison_days:7,ai_analysis_depth:"detailed",...a}},e=[];try{let a;e.push(`[${new Date().toISOString()}] Starting system health analysis`),e.push(`[${new Date().toISOString()}] Execution ID: ${b}`),e.push(`[${new Date().toISOString()}] Options: ${JSON.stringify(d.options,null,2)}`),e.push(`[${new Date().toISOString()}] Collecting system metrics...`);let f=await this.collectSystemMetrics(e);d.options.include_docker&&(e.push(`[${new Date().toISOString()}] Collecting Docker metrics...`),a=await this.collectDockerMetrics(e)),e.push(`[${new Date().toISOString()}] Collecting service metrics...`);let g=await this.collectServiceMetrics(e),h={system_metrics:f,docker_metrics:a,service_metrics:g};e.push(`[${new Date().toISOString()}] Performing AI-powered health analysis...`);let i=await this.healthAnalyzer.analyzeHealth(h,d,e);e.push(`[${new Date().toISOString()}] Compiling health report...`);let j=this.compileHealthReport(f,a,g,i,b),k=Date.now()-c;return e.push(`[${new Date().toISOString()}] Analysis completed in ${k}ms`),e.push(`[${new Date().toISOString()}] Overall health: ${j.overall_health}`),e.push(`[${new Date().toISOString()}] Health score: ${j.ai_analysis.health_score}/100`),{executionId:b,agentType:"system-health",status:"completed",result:JSON.stringify(j,null,2),cost:j.cost_breakdown.execution_cost_usd,duration:k,usage:j.cost_breakdown.tokens_used,logs:e,timestamp:new Date().toISOString(),summary:this.generateExecutionSummary(j)}}catch(f){let a=Date.now()-c,d=f instanceof Error?f.message:"Unknown error occurred";return e.push(`[${new Date().toISOString()}] ERROR: ${d}`),{executionId:b,agentType:"system-health",status:"failed",result:JSON.stringify({error:d,logs:e},null,2),cost:0,duration:a,usage:{input_tokens:0,output_tokens:0,cache_creation_tokens:0,cache_read_tokens:0},logs:e,timestamp:new Date().toISOString(),error:d}}}async executeWithSDK(a,b={}){return this.execute(b)}getCapabilities(){return{name:"System Health Reporter",version:"1.0.0",description:"Comprehensive system health monitoring and analysis agent",capabilities:["CPU, Memory, Disk, Network monitoring","Docker container analysis","System service health checks","Security vulnerability scanning","AI-powered trend analysis","Predictive health insights","Automated recommendations"],estimated_cost_per_run:.05,typical_execution_time_ms:6e4,outputs:["System metrics","Health score (0-100)","AI analysis and recommendations","Security audit results","Performance trends","Critical alerts"]}}async collectSystemMetrics(a){try{let b=await this.systemCollector.collectSystemInfo();return a.push(`[${new Date().toISOString()}] System metrics collected: CPU ${b.cpu.usage_percent.toFixed(1)}%, Memory ${b.memory.usage_percent.toFixed(1)}%, Disk ${b.disk.usage_percent.toFixed(1)}%`),b}catch(c){let b=`Failed to collect system metrics: ${c instanceof Error?c.message:"Unknown error"}`;throw a.push(`[${new Date().toISOString()}] ERROR: ${b}`),Error(b)}}async collectDockerMetrics(a){try{let b=await this.dockerCollector.collectDockerInfo();return b.available&&b.metrics?a.push(`[${new Date().toISOString()}] Docker metrics collected: ${b.metrics.total_containers} containers (${b.metrics.running_containers} running)`):a.push(`[${new Date().toISOString()}] Docker not available or accessible`),b}catch(c){let b=`Failed to collect Docker metrics: ${c instanceof Error?c.message:"Unknown error"}`;return a.push(`[${new Date().toISOString()}] WARNING: ${b}`),{available:!1,error:b,timestamp:new Date().toISOString()}}}async collectServiceMetrics(a){try{let b=await this.serviceCollector.collectServiceHealth();return a.push(`[${new Date().toISOString()}] Service metrics collected: ${b.system_services_count} total services (${b.failed_services_count} failed)`),b}catch(c){let b=`Failed to collect service metrics: ${c instanceof Error?c.message:"Unknown error"}`;throw a.push(`[${new Date().toISOString()}] ERROR: ${b}`),Error(b)}}compileHealthReport(a,b,c,d,e){return{timestamp:new Date().toISOString(),overall_health:d.overall_health||"warning",metrics:{cpu_usage:a.cpu,memory_usage:a.memory,disk_usage:a.disk,network:a.network,services:c.services,security:a.security,docker_containers:b?.metrics},ai_analysis:d.ai_analysis||{summary:"System analysis completed",recommendations:[],trends:[],alerts:[],health_score:85,priority_actions:[]},cost_breakdown:{execution_cost_usd:d.cost||0,tokens_used:d.usage||{input_tokens:0,output_tokens:0,cache_creation_tokens:0,cache_read_tokens:0},model_used:d.model_used||"claude-3-5-sonnet-20241022",execution_duration_ms:d.duration||0,cost_per_minute_usd:.001}}}generateExecutionSummary(a){let b=a.overall_health,c=a.ai_analysis.health_score,d=a.ai_analysis.alerts.length,e=a.ai_analysis.recommendations.length;return`System Health: ${b.toUpperCase()} (${c}/100) - ${d} alerts, ${e} recommendations`}buildAnalysisPrompt(a,b){return`
System Health Analysis Request:
${a}

Analysis Configuration:
- Include Docker: ${b.include_docker?"Yes":"No"}
- Include Security Scan: ${b.include_security_scan?"Yes":"No"}
- Service Analysis: ${b.detailed_service_analysis?"Detailed":"Basic"}
- AI Analysis Depth: ${b.ai_analysis_depth||"detailed"}

Please perform a comprehensive system health analysis and provide:
1. Current system metrics and status
2. Health assessment with scoring
3. Actionable recommendations
4. Trend analysis where applicable
5. Priority alerts and warnings

Focus on actionable insights and clearly prioritize any critical issues.
`}getSystemPrompt(){return`
You are a System Health Reporter agent specializing in comprehensive system monitoring and analysis. Your capabilities include:

TECHNICAL EXPERTISE:
- System resource monitoring (CPU, memory, disk, network)
- Docker container ecosystem analysis  
- System service health assessment
- Security vulnerability detection
- Performance trend analysis
- Predictive maintenance insights

ANALYSIS APPROACH:
- Collect comprehensive system metrics
- Identify performance bottlenecks and resource constraints
- Detect security vulnerabilities and configuration issues
- Analyze service dependencies and failure patterns
- Provide actionable, prioritized recommendations
- Calculate health scores based on multiple factors

OUTPUT REQUIREMENTS:
- Always provide structured, actionable findings
- Prioritize critical issues requiring immediate attention
- Include specific commands/steps for issue resolution
- Provide context for recommendations (why they matter)
- Use clear severity levels (info, warning, error, critical)
- Include estimated impact and implementation difficulty

SAFETY GUIDELINES:
- Never execute destructive commands
- Always verify system state before recommendations
- Provide rollback plans for significant changes
- Highlight potential risks of recommended actions
- Respect system security and access boundaries
`}}class ae extends L.EventEmitter{constructor(a={}){super(),this.tasks=new Map,this.cronJobs=new Map,this.runningTasks=new Set,this.executionHistory=[],this.startTime=new Date,this.isRunning=!1,this.retryQueues=new Map,this.config={timezone:"America/New_York",maxConcurrentTasks:5,taskTimeout:3e5,enableErrorRetry:!0,maxRetries:3,retryDelay:3e4,...a},this.healthAgent=new ad,this.setupDefaultTasks()}async start(){if(this.isRunning)throw Error("Scheduler is already running");for(let a of(this.isRunning=!0,this.startTime=new Date,Array.from(this.tasks.values())))a.enabled&&this.scheduleTask(a);R.isMonitoring()||await R.start(),T.getCollectionStats().isCollecting||await T.start(),this.emit("started"),console.log(`Monitoring scheduler started with ${this.getEnabledTaskCount()} enabled tasks`)}async stop(){if(!this.isRunning)return;for(let[a,b]of(this.isRunning=!1,Array.from(this.cronJobs.entries())))b.stop(),b.destroy(),this.cronJobs.delete(a);for(let[a,b]of Array.from(this.retryQueues.entries()))b.forEach(a=>clearTimeout(a));this.retryQueues.clear();let a=Date.now();for(;this.runningTasks.size>0&&Date.now()-a<3e4;)await new Promise(a=>setTimeout(a,1e3));this.runningTasks.size>0&&console.warn(`Scheduler stopped with ${this.runningTasks.size} tasks still running`),this.emit("stopped"),console.log("Monitoring scheduler stopped")}addTask(a){let b={id:this.generateTaskId(a.name),runCount:0,errorCount:0,...a};if(!W.validate(b.cronExpression))throw Error(`Invalid cron expression: ${b.cronExpression}`);return this.tasks.set(b.id,b),b.enabled&&this.isRunning&&this.scheduleTask(b),this.emit("taskAdded",b),console.log(`Task added: ${b.name} (${b.cronExpression})`),b}removeTask(a){let b=this.tasks.get(a);if(!b)return!1;let c=this.cronJobs.get(a);c&&(c.stop(),c.destroy(),this.cronJobs.delete(a));let d=this.retryQueues.get(a);return d&&(d.forEach(a=>clearTimeout(a)),this.retryQueues.delete(a)),this.tasks.delete(a),this.emit("taskRemoved",b),console.log(`Task removed: ${b.name}`),!0}enableTask(a){let b=this.tasks.get(a);return!!b&&(b.enabled=!0,this.isRunning&&this.scheduleTask(b),this.emit("taskEnabled",b),console.log(`Task enabled: ${b.name}`),!0)}disableTask(a){let b=this.tasks.get(a);if(!b)return!1;b.enabled=!1;let c=this.cronJobs.get(a);return c&&(c.stop(),c.destroy(),this.cronJobs.delete(a)),this.emit("taskDisabled",b),console.log(`Task disabled: ${b.name}`),!0}async executeTaskNow(a){let b=this.tasks.get(a);if(!b)throw Error(`Task not found: ${a}`);return await this.executeTask(b,!0)}getTasks(){return Array.from(this.tasks.values())}getTask(a){return this.tasks.get(a)}getStats(){let a,b=this.executionHistory.length,c=this.executionHistory.filter(a=>a.success).length,d=this.executionHistory.reduce((a,b)=>a+b.duration,0),e=Date.now()-this.startTime.getTime(),f=null;for(let b of Array.from(this.tasks.values()))if(b.enabled&&b.nextRun){let c=new Date(b.nextRun);(!f||c<f)&&(f=c,a={id:b.id,name:b.name,nextRun:b.nextRun})}return{totalTasks:this.tasks.size,enabledTasks:this.getEnabledTaskCount(),runningTasks:this.runningTasks.size,totalExecutions:b,successfulExecutions:c,failedExecutions:b-c,averageExecutionTime:b>0?d/b:0,uptime:e,nextScheduledTask:a}}getExecutionHistory(a=100){return this.executionHistory.sort((a,b)=>new Date(b.startTime).getTime()-new Date(a.startTime).getTime()).slice(0,a)}clearExecutionHistory(){this.executionHistory=[],this.emit("historyCleared")}updateTask(a,b){let c=this.tasks.get(a);if(!c)return!1;if(b.cronExpression&&!W.validate(b.cronExpression))throw Error(`Invalid cron expression: ${b.cronExpression}`);let d=c.enabled,e=c.cronExpression;if(Object.assign(c,b),this.isRunning&&(void 0!==b.enabled||void 0!==b.cronExpression)){let b=this.cronJobs.get(a);b&&(b.stop(),b.destroy(),this.cronJobs.delete(a)),c.enabled&&this.scheduleTask(c)}return this.emit("taskUpdated",c,{oldEnabled:d,oldCronExpression:e}),console.log(`Task updated: ${c.name}`),!0}setupDefaultTasks(){this.addTask({name:"System Health Check",description:"Comprehensive system health analysis using AI agent",cronExpression:"0 */30 * * * *",enabled:!0,type:"health_check",handler:async()=>{let a=await this.healthAgent.execute({include_docker:!0,include_security_scan:!0,detailed_service_analysis:!0});if("failed"===a.status)throw Error(a.error||"Health check failed");console.log(`Health check completed: ${a.summary}`)}}),this.addTask({name:"Metrics Cleanup",description:"Clean up old system metrics data",cronExpression:"0 0 2 * * *",enabled:!0,type:"cleanup",handler:async()=>{let a=await T.cleanupOldMetrics();console.log(`Cleaned up ${a.deletedCount} old metric records`)}}),this.addTask({name:"Alert Cleanup",description:"Clean up old resolved alerts",cronExpression:"0 0 3 * * *",enabled:!0,type:"cleanup",handler:async()=>{console.log("Alert cleanup completed")}}),this.addTask({name:"Status Broadcast",description:"Broadcast system status to connected clients",cronExpression:"0 */5 * * * *",enabled:!0,type:"metrics_collection",handler:async()=>{let a=R.getLastStats();a&&console.log(`Status broadcast: CPU ${a.cpuUsage.toFixed(1)}%, Memory ${a.memoryUsage.toFixed(1)}%, Disk ${a.diskUsage.toFixed(1)}%`)}}),this.addTask({name:"Weekly Performance Report",description:"Generate weekly system performance report",cronExpression:"0 0 6 * * 0",enabled:!0,type:"health_check",handler:async()=>{let a=await T.getMetricsSnapshot(),b=this.getStats();console.log("Weekly Performance Report Generated:",{systemHealth:a.current,schedulerStats:b,executionsLast7Days:this.executionHistory.filter(a=>new Date(a.startTime)>new Date(Date.now()-6048e5)).length})}})}scheduleTask(a){try{let b=W.schedule(a.cronExpression,async()=>{await this.executeTask(a)},{scheduled:!0,timezone:this.config.timezone});this.cronJobs.set(a.id,b),a.nextRun=this.getNextRunTime(a.cronExpression),console.log(`Scheduled task: ${a.name} (next run: ${a.nextRun})`)}catch(b){console.error(`Error scheduling task ${a.name}:`,b),this.emit("taskScheduleError",{task:a,error:b})}}async executeTask(a,b=!1){if(this.runningTasks.size>=this.config.maxConcurrentTasks){let b="Maximum concurrent tasks limit reached";return console.warn(`Task execution skipped: ${a.name} - ${b}`),this.createExecutionResult(a.id,!1,b)}if(this.runningTasks.has(a.id)){let b="Task is already running";return console.warn(`Task execution skipped: ${a.name} - ${b}`),this.createExecutionResult(a.id,!1,b)}let c=new Date;this.runningTasks.add(a.id),this.emit("taskStarted",{task:a,isManual:b,startTime:c}),console.log(`Task started: ${a.name}${b?" (manual)":""}`);try{let d=new Promise((a,b)=>{setTimeout(()=>{b(Error("Task execution timeout"))},this.config.taskTimeout)});await Promise.race([a.handler(),d]);let e=new Date,f=e.getTime()-c.getTime();a.runCount++,a.lastRun=c.toISOString();let g=this.createExecutionResult(a.id,!0,void 0,c,e,f);return this.addExecutionHistory(g),this.emit("taskCompleted",{task:a,result:g,isManual:b}),console.log(`Task completed: ${a.name} (${f}ms)`),g}catch(h){let d=new Date,e=d.getTime()-c.getTime(),f=h instanceof Error?h.message:"Unknown error";a.errorCount++,a.lastError=f;let g=this.createExecutionResult(a.id,!1,f,c,d,e);return this.addExecutionHistory(g),this.emit("taskFailed",{task:a,error:h,result:g,isManual:b}),console.error(`Task failed: ${a.name} - ${f}`),this.config.enableErrorRetry&&!b&&a.errorCount<=this.config.maxRetries&&this.scheduleRetry(a),g}finally{this.runningTasks.delete(a.id)}}scheduleRetry(a){let b=setTimeout(async()=>{console.log(`Retrying task: ${a.name} (attempt ${a.errorCount+1})`),await this.executeTask(a)},this.config.retryDelay*Math.pow(2,a.errorCount-1));this.retryQueues.has(a.id)||this.retryQueues.set(a.id,[]),this.retryQueues.get(a.id).push(b)}createExecutionResult(a,b,c,d,e,f){let g=d||new Date,h=e||new Date,i=void 0!==f?f:h.getTime()-g.getTime();return{taskId:a,success:b,startTime:g.toISOString(),endTime:h.toISOString(),duration:i,error:c}}addExecutionHistory(a){this.executionHistory.push(a),this.executionHistory.length>1e3&&(this.executionHistory=this.executionHistory.slice(-1e3))}getNextRunTime(a){try{return new Date(Date.now()+6e4).toISOString()}catch(a){return new Date().toISOString()}}getEnabledTaskCount(){return Array.from(this.tasks.values()).filter(a=>a.enabled).length}generateTaskId(a){return`task_${a.toLowerCase().replace(/\s+/g,"_")}_${Date.now()}`}}let af=new ae,ag=(0,u.FB)(async a=>{let{authenticated:b,user:c,error:d}=await x(a);if(!b)return y(d||"Authentication required",401);let e=a.nextUrl.searchParams,f=(0,u.fe)(e,v.Bo),g=e.get("endpoint")||"overview";switch(g){case"overview":return(0,u.$y)(await ai(f));case"history":return(0,u.$y)(await aj(f));case"trends":return(0,u.$y)(await ak(f));case"health":return(0,u.$y)(await al(f));default:throw Error(`Unknown endpoint: ${g}`)}}),ah=(0,u.FB)(async a=>{let b,{authenticated:c,user:d,error:e}=await x(a);if(!c)return y(e||"Authentication required",401);if(d?.role!=="admin")return y("Admin access required",403);if(!function(a){if(["POST","PUT","DELETE","PATCH"].includes(a.method)){let b=a.headers.get("x-csrf-token"),c=a.headers.get("origin"),d=a.headers.get("referer");return!!b&&b===process.env.CSRF_TOKEN||!!c&&!!d&&new URL(d).origin===c}return!0}(a))return y("Invalid CSRF token or origin",403);let{action:f,...g}=await a.json();switch(f){case"start_monitoring":b=await am();break;case"stop_monitoring":b=await an();break;case"collect_metrics":b=await ao();break;case"run_health_check":b=await ap();break;case"acknowledge_alert":b=await aq(g.alertId,g.acknowledgedBy);break;case"resolve_alert":b=await ar(g.alertId,g.resolvedBy);break;case"update_thresholds":b=await as(g.thresholds);break;default:throw Error(`Unknown action: ${f}`)}return(0,u.$y)(b)});async function ai(a){let b=R.getLastStats();if(!b)throw Error("No current system metrics available");let c=await K.getLatestSystemHealth();if(!c.success||!c.data)throw Error(`Failed to get system health: ${c.error}`);let d=await K.getMetricsTrends("localhost",24);if(!d.success||!d.data)throw Error(`Failed to get trends: ${d.error}`);let[e,f]=await Promise.all([K.getHealthStatistics("localhost",24),K.getHealthStatistics("localhost",168)]);if(!e.success||!f.success||!e.data||!f.data)throw Error("Failed to get aggregated statistics");let g=V.getAlerts({resolved:!1,limit:10}),h=V.getAlerts({limit:5}),i={systemMonitor:{isRunning:R.isMonitoring(),config:R.getConfig()},metricsCollector:{isCollecting:T.getCollectionStats().isCollecting,stats:T.getCollectionStats()},scheduler:{isRunning:af.getStats().enabledTasks>0,stats:af.getStats()}};try{(await T.getMetricsSnapshot()).predictions}catch(a){console.warn("Failed to get predictions:",a)}return{current:{timestamp:new Date().toISOString(),status:c.data.status,cpu:b.cpuUsage,memory:b.memoryUsage,disk:b.diskUsage,load:b.loadAverage,uptime:b.uptime,networkConnectivity:b.networkConnectivity},trends:d.data.map(a=>({timestamp:a.timestamp,cpu:a.cpuUsage,memory:a.memoryUsage,disk:a.diskUsage,load:a.loadAverage1m,health:a.overallHealth})),aggregated:{last24Hours:{avg:{cpu:e.data.averages.cpu||0,memory:e.data.averages.memory||0,disk:e.data.averages.disk||0},max:{cpu:e.data.maximums.cpu||0,memory:e.data.maximums.memory||0,disk:e.data.maximums.disk||0},min:{cpu:e.data.minimums.cpu||0,memory:e.data.minimums.memory||0,disk:e.data.minimums.disk||0},healthDistribution:e.data.healthDistribution},last7Days:{avg:{cpu:f.data.averages.cpu||0,memory:f.data.averages.memory||0,disk:f.data.averages.disk||0},max:{cpu:f.data.maximums.cpu||0,memory:f.data.maximums.memory||0,disk:f.data.maximums.disk||0},min:{cpu:f.data.minimums.cpu||0,memory:f.data.minimums.memory||0,disk:f.data.minimums.disk||0},healthDistribution:f.data.healthDistribution}},alerts:{active:g.length,recent:h.map(a=>({id:a.id,severity:a.severity,title:a.title,message:a.message,timestamp:a.timestamp}))},monitoring:i}}async function aj(a){let b={nodeId:a.nodeId||"localhost",limit:a.limit||100};a.offset,a.dateFrom&&(b.dateFrom=new Date(a.dateFrom)),a.dateTo&&(b.dateTo=new Date(a.dateTo)),a.healthStatus&&(b.healthStatus=a.healthStatus);let c=await K.getSystemMetrics(b);if(!c.success||!c.data)throw Error(`Failed to get metrics history: ${c.error}`);return{data:c.data.data.map(a=>({timestamp:a.timestamp,nodeId:a.nodeId,cpu:a.cpuUsagePercent,memory:a.memoryUsagePercent,disk:a.diskUsagePercent,loadAverage1m:a.loadAverage1m,loadAverage5m:a.loadAverage5m,loadAverage15m:a.loadAverage15m,internetConnected:!!a.internetConnected,claudeApiLatency:a.claudeApiLatencyMs,overallHealth:a.overallHealth})),total:c.data.total,page:c.data.page,pageSize:c.data.pageSize,hasMore:c.data.hasMore}}async function ak(a){let b=a.timeframe||"day",c=a.metrics?a.metrics.split(","):["cpu","memory","disk"],d=await T.getHistoricalTrends(c,b);return{timeframe:b,trends:d}}async function al(a){var b;let c,d=await K.getLatestSystemHealth();if(!d.success||!d.data)throw Error(`Failed to get system health: ${d.error}`);let e=d.data,f=(c=100,null!=(b=e).cpuUsage&&"number"==typeof b.cpuUsage&&(b.cpuUsage>=90?c-=30:b.cpuUsage>=70?c-=15:b.cpuUsage>=50&&(c-=5)),null!=b.memoryUsage&&"number"==typeof b.memoryUsage&&(b.memoryUsage>=95?c-=25:b.memoryUsage>=80?c-=10:b.memoryUsage>=60&&(c-=5)),null!=b.diskUsage&&"number"==typeof b.diskUsage&&(b.diskUsage>=95?c-=20:b.diskUsage>=85?c-=10:b.diskUsage>=70&&(c-=5)),!1===b.internetConnected&&(c-=15),Math.max(0,Math.min(100,c-=Math.min(5*(b.alerts?.length||0),25)))),g={nextHour:{cpu:0,memory:0,disk:0},confidence:0};try{g=(await T.getMetricsSnapshot()).predictions}catch(a){console.warn("Failed to get predictions:",a)}return{status:e.status,score:f,cpuUsage:e.cpuUsage,memoryUsage:e.memoryUsage,diskUsage:e.diskUsage,loadAverage:e.loadAverage,uptime:e.uptime,internetConnected:e.internetConnected,claudeApiLatency:e.claudeApiLatency,lastUpdated:e.lastUpdated,alerts:e.alerts,predictions:g}}async function am(){let a={systemMonitor:!1,metricsCollector:!1,scheduler:!1};R.isMonitoring()||(await R.start(),a.systemMonitor=!0),T.getCollectionStats().isCollecting||(await T.start(),a.metricsCollector=!0);try{await af.start(),a.scheduler=!0}catch(a){console.warn("Scheduler start warning:",a)}return{message:"Monitoring services started",results:a}}async function an(){let a={systemMonitor:!1,metricsCollector:!1,scheduler:!1};R.isMonitoring()&&(await R.stop(),a.systemMonitor=!0),T.getCollectionStats().isCollecting&&(await T.stop(),a.metricsCollector=!0);try{await af.stop(),a.scheduler=!0}catch(a){console.warn("Scheduler stop warning:",a)}return{message:"Monitoring services stopped",results:a}}async function ao(){return{message:"Metrics collected successfully",stats:await R.collectNow()}}async function ap(){return{message:"Health check executed",result:await af.executeTaskNow("manual_health_check")}}async function aq(a,b){if(!await V.acknowledgeAlert(a,b))throw Error("Alert not found or already acknowledged");return{message:"Alert acknowledged successfully",alertId:a}}async function ar(a,b){if(!await V.resolveAlert(a,b))throw Error("Alert not found or already resolved");return{message:"Alert resolved successfully",alertId:a}}async function as(a){return R.updateConfig({thresholds:a}),{message:"Thresholds updated successfully",thresholds:a}}let at=new e.AppRouteRouteModule({definition:{kind:f.RouteKind.APP_ROUTE,page:"/api/system/metrics/route",pathname:"/api/system/metrics",filename:"route",bundlePath:"app/api/system/metrics/route"},distDir:".next",relativeProjectDir:"",resolvedPagePath:"/home/jmagar/code/agents/src/app/api/system/metrics/route.ts",nextConfigOutput:"standalone",userland:d}),{workAsyncStorage:au,workUnitAsyncStorage:av,serverHooks:aw}=at;function ax(){return(0,g.patchFetch)({workAsyncStorage:au,workUnitAsyncStorage:av})}async function ay(a,b,c){var d;let e="/api/system/metrics/route";"/index"===e&&(e="/");let g=await at.prepare(a,b,{srcPage:e,multiZoneDraftMode:!1});if(!g)return b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve()),null;let{buildId:u,params:v,nextConfig:w,isDraftMode:x,prerenderManifest:y,routerServerContext:z,isOnDemandRevalidate:A,revalidateOnlyGenerated:B,resolvedPathname:C}=g,D=(0,j.normalizeAppPath)(e),E=!!(y.dynamicRoutes[D]||y.routes[C]);if(E&&!x){let a=!!y.routes[C],b=y.dynamicRoutes[D];if(b&&!1===b.fallback&&!a)throw new s.NoFallbackError}let F=null;!E||at.isDev||x||(F="/index"===(F=C)?"/":F);let G=!0===at.isDev||!E,H=E&&!G,I=a.method||"GET",J=(0,i.getTracer)(),K=J.getActiveScopeSpan(),L={params:v,prerenderManifest:y,renderOpts:{experimental:{cacheComponents:!!w.experimental.cacheComponents,authInterrupts:!!w.experimental.authInterrupts},supportsDynamicResponse:G,incrementalCache:(0,h.getRequestMeta)(a,"incrementalCache"),cacheLifeProfiles:null==(d=w.experimental)?void 0:d.cacheLife,isRevalidate:H,waitUntil:c.waitUntil,onClose:a=>{b.on("close",a)},onAfterTaskError:void 0,onInstrumentationRequestError:(b,c,d)=>at.onRequestError(a,b,d,z)},sharedContext:{buildId:u}},M=new k.NodeNextRequest(a),N=new k.NodeNextResponse(b),O=l.NextRequestAdapter.fromNodeNextRequest(M,(0,l.signalFromNodeResponse)(b));try{let d=async c=>at.handle(O,L).finally(()=>{if(!c)return;c.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let d=J.getRootSpanAttributes();if(!d)return;if(d.get("next.span_type")!==m.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${d.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let e=d.get("next.route");if(e){let a=`${I} ${e}`;c.setAttributes({"next.route":e,"http.route":e,"next.span_name":a}),c.updateName(a)}else c.updateName(`${I} ${a.url}`)}),g=async g=>{var i,j;let k=async({previousCacheEntry:f})=>{try{if(!(0,h.getRequestMeta)(a,"minimalMode")&&A&&B&&!f)return b.statusCode=404,b.setHeader("x-nextjs-cache","REVALIDATED"),b.end("This page could not be found"),null;let e=await d(g);a.fetchMetrics=L.renderOpts.fetchMetrics;let i=L.renderOpts.pendingWaitUntil;i&&c.waitUntil&&(c.waitUntil(i),i=void 0);let j=L.renderOpts.collectedTags;if(!E)return await (0,o.I)(M,N,e,L.renderOpts.pendingWaitUntil),null;{let a=await e.blob(),b=(0,p.toNodeOutgoingHttpHeaders)(e.headers);j&&(b[r.NEXT_CACHE_TAGS_HEADER]=j),!b["content-type"]&&a.type&&(b["content-type"]=a.type);let c=void 0!==L.renderOpts.collectedRevalidate&&!(L.renderOpts.collectedRevalidate>=r.INFINITE_CACHE)&&L.renderOpts.collectedRevalidate,d=void 0===L.renderOpts.collectedExpire||L.renderOpts.collectedExpire>=r.INFINITE_CACHE?void 0:L.renderOpts.collectedExpire;return{value:{kind:t.CachedRouteKind.APP_ROUTE,status:e.status,body:Buffer.from(await a.arrayBuffer()),headers:b},cacheControl:{revalidate:c,expire:d}}}}catch(b){throw(null==f?void 0:f.isStale)&&await at.onRequestError(a,b,{routerKind:"App Router",routePath:e,routeType:"route",revalidateReason:(0,n.c)({isRevalidate:H,isOnDemandRevalidate:A})},z),b}},l=await at.handleResponse({req:a,nextConfig:w,cacheKey:F,routeKind:f.RouteKind.APP_ROUTE,isFallback:!1,prerenderManifest:y,isRoutePPREnabled:!1,isOnDemandRevalidate:A,revalidateOnlyGenerated:B,responseGenerator:k,waitUntil:c.waitUntil});if(!E)return null;if((null==l||null==(i=l.value)?void 0:i.kind)!==t.CachedRouteKind.APP_ROUTE)throw Object.defineProperty(Error(`Invariant: app-route received invalid cache entry ${null==l||null==(j=l.value)?void 0:j.kind}`),"__NEXT_ERROR_CODE",{value:"E701",enumerable:!1,configurable:!0});(0,h.getRequestMeta)(a,"minimalMode")||b.setHeader("x-nextjs-cache",A?"REVALIDATED":l.isMiss?"MISS":l.isStale?"STALE":"HIT"),x&&b.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, must-revalidate");let m=(0,p.fromNodeOutgoingHttpHeaders)(l.value.headers);return(0,h.getRequestMeta)(a,"minimalMode")&&E||m.delete(r.NEXT_CACHE_TAGS_HEADER),!l.cacheControl||b.getHeader("Cache-Control")||m.get("Cache-Control")||m.set("Cache-Control",(0,q.getCacheControlHeader)(l.cacheControl)),await (0,o.I)(M,N,new Response(l.value.body,{headers:m,status:l.value.status||200})),null};K?await g(K):await J.withPropagatedContext(a.headers,()=>J.trace(m.BaseServerSpan.handleRequest,{spanName:`${I} ${a.url}`,kind:i.SpanKind.SERVER,attributes:{"http.method":I,"http.target":a.url}},g))}catch(b){if(K||b instanceof s.NoFallbackError||await at.onRequestError(a,b,{routerKind:"App Router",routePath:D,routeType:"route",revalidateReason:(0,n.c)({isRevalidate:H,isOnDemandRevalidate:A})}),E)throw b;return await (0,o.I)(M,N,new Response(null,{status:500})),null}}},10846:a=>{a.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},19121:a=>{a.exports=require("next/dist/server/app-render/action-async-storage.external.js")},26069:(a,b,c)=>{c.d(b,{m_:()=>e,yI:()=>d});class d extends Error{constructor(a,b,c){super(a),this.field=b,this.value=c,this.name="ValidationError"}}class e extends Error{constructor(a,b){super(`${a} with identifier '${b}' not found`),this.name="NotFoundError"}}},28354:a=>{a.exports=require("util")},29021:a=>{a.exports=require("fs")},29294:a=>{a.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:a=>{a.exports=require("path")},44870:a=>{a.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},51606:(a,b,c)=>{c.d(b,{$A:()=>j,AD:()=>q,Bo:()=>r,Gy:()=>l,Lf:()=>o,Ny:()=>i,Xi:()=>p,dP:()=>k,sS:()=>h,sr:()=>g,yv:()=>n,z7:()=>m});var d=c(59507);let e=d.Ikc({page:d.aig().int().positive().default(1),limit:d.aig().int().positive().max(100).default(20),sortBy:d.YjP().optional(),sortOrder:d.k5n(["asc","desc"]).default("desc")}),f=d.Ikc({dateFrom:d.p6U().optional(),dateTo:d.p6U().optional()}),g=e.extend({agentType:d.YjP().optional(),status:d.k5n(["pending","running","completed","failed","cancelled"]).optional(),nodeId:d.YjP().optional(),triggeredBy:d.k5n(["manual","schedule","webhook"]).optional()}).merge(f),h=d.Ikc({agentType:d.YjP().min(1,"Agent type is required"),nodeId:d.YjP().optional(),triggeredBy:d.k5n(["manual","schedule","webhook"]).default("manual"),config:d.g1P(d.YjP(),d.bzn()).optional(),metadata:d.g1P(d.YjP(),d.bzn()).optional()}),i=d.Ikc({status:d.k5n(["pending","running","completed","failed","cancelled"]).optional(),completedAt:d.YjP().datetime().optional(),durationMs:d.aig().int().nonnegative().optional(),costUsd:d.aig().nonnegative().optional(),tokensUsed:d.aig().int().nonnegative().optional(),resultSummary:d.YjP().optional(),errorMessage:d.YjP().optional(),exitCode:d.aig().int().optional(),logs:d.YjP().optional(),aiAnalysis:d.YjP().optional(),rawOutput:d.YjP().optional()}),j=d.Ikc({includeSteps:d.zMY().default(!1),includeCosts:d.zMY().default(!1),includeConfig:d.zMY().default(!1),includeLogs:d.zMY().default(!1)}),k=d.Ikc({agentType:d.YjP().min(1,"Agent type is required").regex(/^[a-z][a-z0-9-]*[a-z0-9]$/,"Agent type must be lowercase, alphanumeric with hyphens"),name:d.YjP().min(1,"Name is required"),description:d.YjP().optional(),version:d.YjP().regex(/^\d+\.\d+\.\d+$/,"Version must follow semantic versioning (e.g., 1.0.0)").optional(),enabled:d.zMY().default(!0),config:d.YjP().optional(),maxCostPerExecution:d.aig().nonnegative().optional(),maxDurationMs:d.aig().int().positive().optional(),timeoutMs:d.aig().int().positive().optional(),maxConcurrentExecutions:d.aig().int().min(1).optional(),cooldownMs:d.aig().int().nonnegative().optional()}),l=k.partial().omit({agentType:!0}),m=d.Ikc({enabled:d.zMY().optional(),orderBy:d.k5n(["name","agentType","createdAt","updatedAt"]).default("name"),orderDirection:d.k5n(["asc","desc"]).default("asc")}).merge(e),n=d.Ikc({executionId:d.YjP().min(1,"Execution ID is required"),modelUsed:d.YjP().min(1,"Model is required"),inputTokens:d.aig().int().nonnegative(),outputTokens:d.aig().int().nonnegative(),inputCostUsd:d.aig().nonnegative(),outputCostUsd:d.aig().nonnegative(),totalCostUsd:d.aig().nonnegative(),requestId:d.YjP().optional(),responseTime:d.aig().nonnegative().optional(),cacheHit:d.zMY().optional()}),o=d.Ikc({agentType:d.YjP().optional(),modelUsed:d.YjP().optional(),executionId:d.YjP().optional(),groupBy:d.k5n(["day","week","month","agent","model"]).optional(),includeBreakdown:d.zMY().default(!1),includeProjections:d.zMY().default(!1)}).merge(f).merge(e),p=d.Ikc({period:d.k5n(["day","week","month"]).default("day"),days:d.aig().int().positive().max(365).default(30)});d.Ikc({name:d.YjP().min(1,"Name is required"),agentType:d.YjP().min(1,"Agent type is required"),cronExpression:d.YjP().min(1,"Cron expression is required"),timezone:d.YjP().default("UTC"),enabled:d.zMY().default(!0),nodeIds:d.YOg(d.YjP()).optional(),executionConfig:d.g1P(d.YjP(),d.bzn()).optional(),maxExecutions:d.aig().int().positive().optional()}).partial().omit({agentType:!0});let q=d.Ikc({includeDatabase:d.zMY().default(!0),includeFileSystem:d.zMY().default(!0),includeExternalServices:d.zMY().default(!0)});d.Ikc({nodeId:d.YjP().default("localhost"),cpuUsagePercent:d.aig().min(0).max(100).optional(),memoryUsagePercent:d.aig().min(0).max(100).optional(),diskUsagePercent:d.aig().min(0).max(100).optional(),loadAverage1m:d.aig().nonnegative().optional(),loadAverage5m:d.aig().nonnegative().optional(),loadAverage15m:d.aig().nonnegative().optional(),diskFreeBytes:d.aig().nonnegative().optional(),diskTotalBytes:d.aig().positive().optional(),internetConnected:d.zMY().optional(),claudeApiLatencyMs:d.aig().nonnegative().optional(),overallHealth:d.k5n(["healthy","degraded","unhealthy"]).optional()});let r=d.Ikc({nodeId:d.YjP().default("localhost"),timeframe:d.k5n(["hour","day","week","month"]).default("day"),metrics:d.YjP().optional(),healthStatus:d.k5n(["healthy","warning","critical"]).optional(),limit:d.aig().int().positive().max(1e3).default(100),offset:d.aig().int().nonnegative().default(0)}).merge(f);d.Ikc({operations:d.YOg(d.Ikc({action:d.k5n(["create","update","delete"]),data:d.KCZ([h,i]),id:d.YjP().optional()})).min(1).max(100)}),d.Ikc({query:d.YjP().min(1,"Search query is required"),type:d.k5n(["executions","agents","schedules","logs"]).optional(),filters:d.g1P(d.YjP(),d.bzn()).optional()}).merge(e),d.Ikc({type:d.k5n(["executions","costs","config","all"]),format:d.k5n(["json","csv","excel"]),filters:d.g1P(d.YjP(),d.bzn()).optional()}).merge(f)},63033:a=>{a.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},69334:(a,b,c)=>{c.d(b,{T9:()=>j,U9:()=>g,Zf:()=>h,cz:()=>i,jk:()=>k});var d=c(80228),e=c(46493),f=c(85766);function g(a){return(0,f.ll)`count(${a||f.ll.raw("*")})`.mapWith(Number)}function h(a){return(0,f.ll)`avg(${a})`.mapWith(String)}function i(a){return(0,f.ll)`sum(${a})`.mapWith(String)}function j(a){return(0,f.ll)`max(${a})`.mapWith((0,e.is)(a,d.V)?a:String)}function k(a){return(0,f.ll)`min(${a})`.mapWith((0,e.is)(a,d.V)?a:String)}},77598:a=>{a.exports=require("node:crypto")},86439:a=>{a.exports=require("next/dist/shared/lib/no-fallback-error.external")},87550:a=>{a.exports=require("better-sqlite3")}};var b=require("../../../../webpack-runtime.js");b.C(a);var c=b.X(0,[586,923,213],()=>b(b.s=10005));module.exports=c})();