# ClaudeOps Docker Compose Configuration
# Production deployment with monitoring and backup services

# Docker Compose version is now automatically detected

services:
  # Main ClaudeOps Application
  claudeops:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: claudeops-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      # Core Configuration
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-https://claudeops.yourdomain.com}
      NEXT_PUBLIC_APP_NAME: ClaudeOps
      
      # Database
      DATABASE_URL: sqlite:/app/data/production.db
      
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # WebSocket Configuration
      WEBSOCKET_PORT: 3001
      WEBSOCKET_HOST: 0.0.0.0
      
      # Security
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXT_PUBLIC_APP_URL:-https://claudeops.yourdomain.com}
      
      # Cost Management
      COST_ALERT_THRESHOLD: ${COST_ALERT_THRESHOLD:-50.00}
      MONTHLY_BUDGET_LIMIT: ${MONTHLY_BUDGET_LIMIT:-500.00}
      COST_BUDGET_DAILY: ${COST_BUDGET_DAILY:-25.00}
      COST_BUDGET_MONTHLY: ${COST_BUDGET_MONTHLY:-500.00}
      
      # Agent Configuration
      MAX_CONCURRENT_EXECUTIONS: ${MAX_CONCURRENT_EXECUTIONS:-5}
      MAX_CONCURRENT_AGENTS: ${MAX_CONCURRENT_AGENTS:-5}
      DEFAULT_AGENT_TIMEOUT: ${DEFAULT_AGENT_TIMEOUT:-300000}
      AGENT_MEMORY_LIMIT: ${AGENT_MEMORY_LIMIT:-1024}
      AGENT_CPU_LIMIT: ${AGENT_CPU_LIMIT:-80}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      LOG_FILE_PATH: /app/logs/claudeops-production.log
      
      # Performance
      CONFIG_CACHE_TTL: ${CONFIG_CACHE_TTL:-300000}
      DISABLE_HOT_RELOAD: true
      
      # Health Check
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-60000}
      HEALTH_CHECK_TIMEOUT: ${HEALTH_CHECK_TIMEOUT:-10000}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-1000}
      
      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}
      
      # Backup
      BACKUP_ENABLED: ${BACKUP_ENABLED:-true}
      BACKUP_INTERVAL_HOURS: ${BACKUP_INTERVAL_HOURS:-24}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    
    volumes:
      # Persistent data
      - claudeops_data:/app/data
      - claudeops_logs:/app/logs
      - claudeops_temp:/app/temp
      
      # Optional: SSL certificates
      - ${SSL_CERTS_PATH:-./certs}:/app/certs:ro
    
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://localhost:3000/api/system/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    depends_on:
      - backup-service
    
    networks:
      - claudeops-network
    
    labels:
      - "com.claudeops.service=main"
      - "com.claudeops.version=1.0.0"

  # Backup Service
  backup-service:
    image: alpine:3.18
    container_name: claudeops-backup
    restart: unless-stopped
    environment:
      BACKUP_INTERVAL: ${BACKUP_INTERVAL_HOURS:-24}
      RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_PATH: /backups
      DATA_PATH: /data
    volumes:
      - claudeops_data:/data:ro
      - claudeops_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache sqlite curl &&
        chmod +x /backup.sh &&
        while true; do
          /backup.sh
          sleep $((BACKUP_INTERVAL * 3600))
        done
      "
    networks:
      - claudeops-network
    labels:
      - "com.claudeops.service=backup"
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: claudeops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - claudeops-network
    profiles:
      - monitoring
  
  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: claudeops-grafana
    restart: unless-stopped
    ports:
      - "3100:3000"  # Changed from 3001 to 3100 to avoid conflict with claudeops
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - claudeops-network
    profiles:
      - monitoring
    depends_on:
      - prometheus
  
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: claudeops-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/traefik:/etc/traefik:ro
      - traefik_data:/data
    networks:
      - claudeops-network
    profiles:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.tls=true"

# Named volumes for data persistence
volumes:
  claudeops_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  
  claudeops_temp:
    driver: local
  
  claudeops_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  
  claudeops_backups:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  traefik_data:
    driver: local

# Network configuration
networks:
  claudeops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
